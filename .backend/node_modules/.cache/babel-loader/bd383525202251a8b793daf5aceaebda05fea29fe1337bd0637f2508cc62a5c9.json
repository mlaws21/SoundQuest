{"ast":null,"code":"var _jsxFileName = \"/Users/mattlaws/personal/spotify_react/src/components/Main.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { authorize } from \"../scripts.js\";\nimport \"./styles/Main.css\";\nimport placeholder_playlist from \"./images/placeholder_playlist.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANSWER_TIME = 6000;\nconst THINK_TIME = 6;\n// TODO can change these with a (easy, medium, hard) setting\n// TODO allow fo playlist searching (get category playlist)\n\nconst user_data = await authorize();\nconst profile_data = user_data.profile;\nconst accessToken = user_data.accessToken;\n\n// Decode the access token\n\n// .then(response => response.json())\n// .then(data => {\n//   // Handle the response data\n//   console.log(data);\n// })\n// .catch(error => {\n//   // Handle any errors\n//   console.error('Error:', error);\n// });\n\n// const get_songs = (playlist_id) => {\n//   fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`, {\n//     method: 'GET',\n//     headers: {\n//       'Authorization': `Bearer ${accessToken}`\n//     }\n//   })\n//     .then(response => response.json())\n//     .then(data => {\n//       // data contains the tracks in the playlist\n//       console.log(data);\n//     })\n//     .catch(error => {\n//       console.error('Error:', error);\n//     });//}, []);\n\n// }\n\nconst Get_available_devices = async () => {\n  const response = await fetch('https://api.spotify.com/v1/me/player/devices', {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`\n    }\n  });\n  const data = await response.json();\n  return data;\n};\n\n// const GetCurrentSongData = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n//             headers: {\n//                 'Authorization': `Bearer ${accessToken}`\n//             }\n//         });\n//         const data = await response.json();\n//         // console.log(data); // This will log the data to the console\n\n//         // Return the current song data\n//         return {\n//             \"duration\": data?.item?.duration_ms,\n//             \"artists\": data?.item?.artists,\n//             \"name\": data?.item?.name,\n//         };\n//     } catch (error) {\n//         console.error('Error:', error);\n//         return null; // Return null or handle the error as needed\n//     }\n// };\n\n// const GetNextSongData = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n//           method: 'POST',\n//           headers: {\n//             'Authorization': `Bearer ${accessToken}`,\n//           },\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to skip');\n//         }\n\n//         console.log('skipped');\n//         try {\n//             const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${accessToken}`\n//                 }\n//             });\n//             const data = await response.json();\n//             // console.log(data); // This will log the data to the console\n\n//             // Return the current song data\n//             return {\n//                 \"duration\": data?.item?.duration_ms,\n//                 \"artists\": data?.item?.artists,\n//                 \"name\": data?.item?.name,\n//                 \"cover\": data?.item?.album?.images[0].url\n//             };\n//         } catch (error) {\n//             console.error('Error:', error);\n//             return null; // Return null or handle the error as needed\n//         }\n\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n\n// };\n_c = Get_available_devices;\nconst set_volume = async vol => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/volume?volume_percent=${vol}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to change volume');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst pause = async () => {\n  const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n    method: 'PUT',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`\n    }\n  });\n  if (!pause_response.ok) {\n    throw new Error('Failed to pause');\n  }\n};\nconst GetNextSongDataRandom = async () => {\n  try {\n    // const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n    //     method: 'PUT',\n    //     headers: {\n    //       'Authorization': `Bearer ${accessToken}`,\n    //     },\n    //   });\n\n    //   if (!pause_response.ok) {\n    //     throw new Error('Failed to pause');\n    //   }\n\n    await set_volume(0);\n    const skip_response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!skip_response.ok) {\n      throw new Error('Failed to skip');\n    }\n    console.log('skipped');\n    try {\n      var _data$item, _data$item2, _data$item3, _data$item4, _data$item5, _data$item5$album;\n      const data_response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      const data = await data_response.json();\n      const max_start = (data === null || data === void 0 ? void 0 : (_data$item = data.item) === null || _data$item === void 0 ? void 0 : _data$item.duration_ms) - 30000;\n\n      // seek random position\n      const random_pos = Math.floor(Math.random() * max_start);\n      const seek_response = await fetch(`https://api.spotify.com/v1/me/player/seek?position_ms=${random_pos}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!seek_response.ok) {\n        throw new Error('Failed to seek');\n      }\n\n      // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n      // Usage: wait for 5 seconds\n      // await delay(1000);\n\n      set_volume(100);\n\n      // const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      //     method: 'PUT',\n      //     headers: {\n      //       'Authorization': `Bearer ${accessToken}`,\n      //       'Content-Type': 'application/json',\n      //     },\n      //     // body: JSON.stringify({\n      //     //     \"position_ms\": `${random_pos}`\n\n      //     // }),\n      //   });\n\n      //   if (!play_response.ok) {\n      //     throw new Error('Failed to play');\n      //   }\n      // Return the current song data\n\n      setTimeout(() => {\n        // This code will execute after 10 seconds\n        pause();\n      }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n\n      return {\n        \"duration\": data === null || data === void 0 ? void 0 : (_data$item2 = data.item) === null || _data$item2 === void 0 ? void 0 : _data$item2.duration_ms,\n        \"artists\": data === null || data === void 0 ? void 0 : (_data$item3 = data.item) === null || _data$item3 === void 0 ? void 0 : _data$item3.artists,\n        \"name\": data === null || data === void 0 ? void 0 : (_data$item4 = data.item) === null || _data$item4 === void 0 ? void 0 : _data$item4.name,\n        \"cover\": data === null || data === void 0 ? void 0 : (_data$item5 = data.item) === null || _data$item5 === void 0 ? void 0 : (_data$item5$album = _data$item5.album) === null || _data$item5$album === void 0 ? void 0 : _data$item5$album.images[0].url\n      };\n    } catch (error) {\n      console.error('Error:', error);\n      return null; // Return null or handle the error as needed\n    }\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n_c2 = GetNextSongDataRandom;\nconst playPlaylist = async playlistId => {\n  // Get_available_devices()\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        context_uri: `spotify:playlist:${playlistId}`\n        // context_uri: `spotify:track:4iV5W9uYEdYUVa79Axb7Rh`,\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to play playlist');\n    }\n    console.log('Playlist is now playing');\n    // Get_current_song_data()\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst handle_playlist_click = playlist_id => {\n  playPlaylist(playlist_id);\n};\nconst GetPlaylist = playlist_json => {\n  var _playlist_json$images, _playlist_json$images2;\n  // Assuming accessToken is the access token\n  // const [data, setData] = useState(null);\n\n  // useEffect(() => {\n  // const playlistId = 'PLAYLIST_ID'; // Replace PLAYLIST_ID with the ID of your playlist\n\n  // console.log(data)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"playlist_image\",\n      onClick: handle_playlist_click.bind(null, playlist_json.id),\n      src: (_playlist_json$images = (_playlist_json$images2 = playlist_json.images[0]) === null || _playlist_json$images2 === void 0 ? void 0 : _playlist_json$images2.url) !== null && _playlist_json$images !== void 0 ? _playlist_json$images : placeholder_playlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"playlist_name\",\n      children: playlist_json.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 7\n  }, this);\n};\n_c3 = GetPlaylist;\nconst PlaylistSelect = () => {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(json => setData(json)).catch(error => console.error(error));\n  }, []);\n\n  // data ? console.log(data.items[4]) : console.log(\"pending\")\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"playlist_select\",\n    children: data ? data.items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist\",\n      children: GetPlaylist(item)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }, this)) : 'Loading...'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaylistSelect, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c4 = PlaylistSelect;\nfunction Header() {\n  // displayName: profile.display_name,\n  // id: profile.id,\n  // email: profile.email,\n  // uri: profile.uri,\n  // profileImage: profileImage\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"head\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"headerItem\",\n      id: \"title\",\n      children: \" Spotify Song Trivia\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"headerItem\",\n      id: \"profile_img\",\n      src: profile_data.profileImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"headerItem\",\n      id: \"username\",\n      children: [\" \", profile_data.displayName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 9\n  }, this);\n}\n_c5 = Header;\nconst Skip = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to skip');\n    }\n    console.log('skipped');\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n_c6 = Skip;\nconst Shuffle = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/shuffle?state=true`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to shuffle');\n    }\n    console.log('shuffling enabled');\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n_c7 = Shuffle;\nconst NextQuestion = async () => {\n  const song_data = await GetNextSongDataRandom();\n  // Get_available_devices()\n  return song_data;\n  // await Skip()\n\n  // Skip()\n};\n\n// const Get_devices = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/devices`, {\n//           method: 'GET',\n//           headers: {\n//             'Authorization': `Bearer ${accessToken}`,\n//           },\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to get devices');\n//         }\n\n//         console.log('shuffling enabled');\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n// }\n\n// const Correct = () => {\n\n// }\n_c8 = NextQuestion;\nconst GetArtists = artist_list => {\n  return (\n    /*#__PURE__*/\n    // {data ? data.items.map((item, index) => (\n    //     <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n    //   )) : 'Loading...'}\n    _jsxDEV(\"div\", {\n      className: \"artist_wrap\",\n      children: artist_list.map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"artist\",\n        children: [artist.name, index == artist_list.length - 1 ? \"\" : \",\", \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 9\n    }, this)\n  );\n};\n_c9 = GetArtists;\nconst Game = () => {\n  _s2();\n  const [songData, setSongData] = useState(null);\n  const [reavealed, setReavealed] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(THINK_TIME);\n\n  // setReavealed(false);\n\n  useEffect(async () => {\n    // await set_volume(100);\n    await Shuffle();\n    // await Get_available_devices();\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimeLeft(prevTimeLeft => {\n        if (prevTimeLeft === 0) {\n          clearInterval(interval);\n          return 0;\n        }\n        return prevTimeLeft - 1;\n      });\n    }, 1000);\n\n    // Clean up the interval to avoid memory leaks\n    return () => clearInterval(interval);\n  }, [songData]); // Run only once on component mount\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"skip\",\n      onClick: async () => {\n        const result = await NextQuestion();\n        setSongData(result);\n        setReavealed(false);\n        setTimeLeft(THINK_TIME);\n      },\n      children: \"Skip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"skip\",\n      onClick: () => setReavealed(true),\n      children: \"Correct\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"skip\",\n      onClick: () => setReavealed(false),\n      children: \"Hide\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"track_image\",\n      src: songData && reavealed ? songData.cover : placeholder_playlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer_track\",\n      children: [\"Song: \", songData && reavealed ? songData.name : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: `${Math.floor(timeLeft / 1000)} `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer_artists\",\n      children: [\"Artist: \", songData && reavealed ? GetArtists(songData.artists) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer_header\",\n      children: \"Time Left:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: `${timeLeft} `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 503,\n    columnNumber: 9\n  }, this);\n};\n\n// const PlayPlaylistButton = (playlistId) => {\n//   const playPlaylist = async () => {\n//     try {\n//       const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${accessToken}`,\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           context_uri: `spotify:playlist:${playlistId}`,\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to play playlist');\n//       }\n\n//       console.log('Playlist is now playing');\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <button onClick={playPlaylist}>\n//       Play Playlist\n//     </button>\n//   );\n// };\n_s2(Game, \"CXXq9r3k3Q+Wg4oN4JZ8IjyN5Q4=\");\n_c10 = Game;\nconst Main = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlaylistSelect, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 574,\n    columnNumber: 5\n  }, this);\n};\n_c11 = Main;\nexport default Main;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"Get_available_devices\");\n$RefreshReg$(_c2, \"GetNextSongDataRandom\");\n$RefreshReg$(_c3, \"GetPlaylist\");\n$RefreshReg$(_c4, \"PlaylistSelect\");\n$RefreshReg$(_c5, \"Header\");\n$RefreshReg$(_c6, \"Skip\");\n$RefreshReg$(_c7, \"Shuffle\");\n$RefreshReg$(_c8, \"NextQuestion\");\n$RefreshReg$(_c9, \"GetArtists\");\n$RefreshReg$(_c10, \"Game\");\n$RefreshReg$(_c11, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","authorize","placeholder_playlist","jsxDEV","_jsxDEV","ANSWER_TIME","THINK_TIME","user_data","profile_data","profile","accessToken","Get_available_devices","response","fetch","headers","data","json","_c","set_volume","vol","method","ok","Error","error","console","pause","pause_response","GetNextSongDataRandom","skip_response","log","_data$item","_data$item2","_data$item3","_data$item4","_data$item5","_data$item5$album","data_response","max_start","item","duration_ms","random_pos","Math","floor","random","seek_response","setTimeout","artists","name","album","images","url","_c2","playPlaylist","playlistId","body","JSON","stringify","context_uri","handle_playlist_click","playlist_id","GetPlaylist","playlist_json","_playlist_json$images","_playlist_json$images2","children","className","onClick","bind","id","src","fileName","_jsxFileName","lineNumber","columnNumber","_c3","PlaylistSelect","_s","setData","then","catch","items","map","index","_c4","Header","profileImage","displayName","_c5","Skip","_c6","Shuffle","_c7","NextQuestion","song_data","_c8","GetArtists","artist_list","artist","length","_c9","Game","_s2","songData","setSongData","reavealed","setReavealed","timeLeft","setTimeLeft","interval","setInterval","prevTimeLeft","clearInterval","result","cover","_c10","Main","_c11","$RefreshReg$"],"sources":["/Users/mattlaws/personal/spotify_react/src/components/Main.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {authorize} from \"../scripts.js\"\nimport \"./styles/Main.css\"\nimport placeholder_playlist from \"./images/placeholder_playlist.png\"\n\nconst ANSWER_TIME = 6000\nconst THINK_TIME = 6\n// TODO can change these with a (easy, medium, hard) setting\n// TODO allow fo playlist searching (get category playlist)\n\nconst user_data = await authorize();\n\nconst profile_data = user_data.profile;\nconst accessToken = user_data.accessToken;\n\n// Decode the access token\n\n\n  // .then(response => response.json())\n  // .then(data => {\n  //   // Handle the response data\n  //   console.log(data);\n  // })\n  // .catch(error => {\n  //   // Handle any errors\n  //   console.error('Error:', error);\n  // });\n\n// const get_songs = (playlist_id) => {\n//   fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`, {\n//     method: 'GET',\n//     headers: {\n//       'Authorization': `Bearer ${accessToken}`\n//     }\n//   })\n//     .then(response => response.json())\n//     .then(data => {\n//       // data contains the tracks in the playlist\n//       console.log(data);\n//     })\n//     .catch(error => {\n//       console.error('Error:', error);\n//     });//}, []);\n  \n// }\n\n\nconst Get_available_devices = async () => {\n    const response = await fetch('https://api.spotify.com/v1/me/player/devices', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n        })\n    \n        const data = await response.json();\n\n\n\n  return data;\n}\n\n\n// const GetCurrentSongData = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n//             headers: {\n//                 'Authorization': `Bearer ${accessToken}`\n//             }\n//         });\n//         const data = await response.json();\n//         // console.log(data); // This will log the data to the console\n\n//         // Return the current song data\n//         return {\n//             \"duration\": data?.item?.duration_ms,\n//             \"artists\": data?.item?.artists,\n//             \"name\": data?.item?.name,\n//         };\n//     } catch (error) {\n//         console.error('Error:', error);\n//         return null; // Return null or handle the error as needed\n//     }\n// };\n\n// const GetNextSongData = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n//           method: 'POST',\n//           headers: {\n//             'Authorization': `Bearer ${accessToken}`,\n//           },\n//         });\n    \n//         if (!response.ok) {\n//           throw new Error('Failed to skip');\n//         }\n    \n//         console.log('skipped');\n//         try {\n//             const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${accessToken}`\n//                 }\n//             });\n//             const data = await response.json();\n//             // console.log(data); // This will log the data to the console\n    \n//             // Return the current song data\n//             return {\n//                 \"duration\": data?.item?.duration_ms,\n//                 \"artists\": data?.item?.artists,\n//                 \"name\": data?.item?.name,\n//                 \"cover\": data?.item?.album?.images[0].url\n//             };\n//         } catch (error) {\n//             console.error('Error:', error);\n//             return null; // Return null or handle the error as needed\n//         }\n\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n    \n// };\n\n\nconst set_volume = async (vol) => {\n\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/volume?volume_percent=${vol}`, {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n        },\n\n\n        })\n\n        if (!response.ok) {\n            throw new Error('Failed to change volume');\n        }\n    } catch (error) {\n\n        console.error('Error:', error);\n    }\n\n}\n\nconst pause = async () => {\n    const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n        },\n        });\n    \n        if (!pause_response.ok) {\n        throw new Error('Failed to pause');\n        }\n}\n\nconst GetNextSongDataRandom = async () => {\n    try {\n        \n\n        // const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n        //     method: 'PUT',\n        //     headers: {\n        //       'Authorization': `Bearer ${accessToken}`,\n        //     },\n        //   });\n      \n        //   if (!pause_response.ok) {\n        //     throw new Error('Failed to pause');\n        //   }\n\n\n        await set_volume(0);\n\n        const skip_response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n          },\n        });\n\n        \n    \n        if (!skip_response.ok) {\n          throw new Error('Failed to skip');\n        }\n    \n        \n\n        console.log('skipped');\n        try {\n            const data_response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`\n                }\n            });\n            const data = await data_response.json();\n\n            const max_start = data?.item?.duration_ms - 30000;\n            \n            // seek random position\n            const random_pos =  Math.floor(Math.random() * max_start);\n            const seek_response = await fetch(`https://api.spotify.com/v1/me/player/seek?position_ms=${random_pos}`, {\n                method: 'PUT',\n                headers: {\n                  'Authorization': `Bearer ${accessToken}`,\n                },\n              });\n\n              if (!seek_response.ok) {\n                throw new Error('Failed to seek');\n              }\n            \n            // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n              // Usage: wait for 5 seconds\n            // await delay(1000);\n\n            set_volume(100)\n\n            // const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n            //     method: 'PUT',\n            //     headers: {\n            //       'Authorization': `Bearer ${accessToken}`,\n            //       'Content-Type': 'application/json',\n            //     },\n            //     // body: JSON.stringify({\n            //     //     \"position_ms\": `${random_pos}`\n            \n            //     // }),\n            //   });\n          \n            //   if (!play_response.ok) {\n            //     throw new Error('Failed to play');\n            //   }\n            // Return the current song data\n            \n            setTimeout(() => {\n                // This code will execute after 10 seconds\n                pause();\n            }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n\n            return { \n                \"duration\": data?.item?.duration_ms,\n                \"artists\": data?.item?.artists,\n                \"name\": data?.item?.name,\n                \"cover\": data?.item?.album?.images[0].url\n            };\n        } catch (error) {\n            console.error('Error:', error);\n            return null; // Return null or handle the error as needed\n        }\n\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    \n};\n\n\nconst playPlaylist = async (playlistId) => {\n  // Get_available_devices()\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        context_uri: `spotify:playlist:${playlistId}`,\n        // context_uri: `spotify:track:4iV5W9uYEdYUVa79Axb7Rh`,\n\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to play playlist');\n    }\n\n    console.log('Playlist is now playing');\n    // Get_current_song_data()\n\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n\nconst handle_playlist_click = (playlist_id) => {\n\n  playPlaylist(playlist_id)\n\n}\n\n\nconst GetPlaylist = (playlist_json) => {\n\n\n  // Assuming accessToken is the access token\n// const [data, setData] = useState(null);\n  \n// useEffect(() => {\n// const playlistId = 'PLAYLIST_ID'; // Replace PLAYLIST_ID with the ID of your playlist\n\n\n  // console.log(data)\n\n    \n    return (\n      <div>\n        <img className='playlist_image' onClick={handle_playlist_click.bind(null, playlist_json.id)} src={playlist_json.images[0]?.url ?? placeholder_playlist}></img>\n        <p className='playlist_name'>{playlist_json.name}</p>\n        \n      </div>\n    );\n  };\n\n\nconst PlaylistSelect = () => {\n  const [data, setData] = useState(null);\n  \n  useEffect(() => {\n    fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\nheaders: {\n  'Authorization': `Bearer ${accessToken}`\n}\n})\n      .then(response => response.json())\n      .then(json => setData(json))\n      .catch(error => console.error(error));\n  }, []);\n  \n  // data ? console.log(data.items[4]) : console.log(\"pending\")\n  \n\n  \n\n  return (\n    <div id=\"playlist_select\">\n      {/* {data ? <pre>{JSON.stringify(data, null, 2)}</pre> : 'Loading...'} */}\n      {/* {data ? <pre>{get_playlist(data.items[0])}</pre> : 'Loading...'}\n      {data ? <pre>{get_playlist(data.items[2])}</pre> : 'Loading...'}\n      {data ? <pre>{get_playlist(data.items[3])}</pre> : 'Loading...'}\n      {data ? <pre>{get_playlist(data.items[5])}</pre> : 'Loading...'} */}\n      {/* {data ? <pre>{JSON.(data.items[5], null, 2)}</pre> : 'Loading...'} */}\n\n\n      {data ? data.items.map((item, index) => (\n        <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n      )) : 'Loading...'}\n\n    </div>\n\n  );\n}\n\nfunction Header() {\n  // displayName: profile.display_name,\n  // id: profile.id,\n  // email: profile.email,\n  // uri: profile.uri,\n  // profileImage: profileImage\n  return (\n        <div id=\"head\">\n            {/* <section id=\"profile\"> */}\n            <h1 className=\"headerItem\" id=\"title\"> Spotify Song Trivia</h1>\n            <img className=\"headerItem\"  id=\"profile_img\" src={profile_data.profileImage} />\n\n            <h2 className=\"headerItem\"  id=\"username\"> {profile_data.displayName}</h2> \n            {/* <ul> */}\n                {/* <li>User ID: <span id=\"id\"></span></li> */}\n                {/* <li>Email: {profile_data.email}</li> */}\n            {/* </ul> */}\n            {/* </section> */}\n\n        </div>\n  );\n}\n\nconst Skip = async () => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n          },\n        });\n    \n        if (!response.ok) {\n          throw new Error('Failed to skip');\n        }\n    \n        console.log('skipped');\n\n      } catch (error) {\n        console.error('Error:', error);\n      }\n      \n}\n\nconst Shuffle = async () => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/shuffle?state=true`, {\n          method: 'PUT',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n          },\n        });\n    \n        if (!response.ok) {\n          throw new Error('Failed to shuffle');\n        }\n    \n        console.log('shuffling enabled');\n      } catch (error) {\n        console.error('Error:', error);\n      }\n}\n\nconst NextQuestion = async () => {\n    const song_data = await GetNextSongDataRandom();\n    // Get_available_devices()\n    return song_data;\n    // await Skip()\n\n    // Skip()\n\n\n    \n\n}\n\n// const Get_devices = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/devices`, {\n//           method: 'GET',\n//           headers: {\n//             'Authorization': `Bearer ${accessToken}`,\n//           },\n//         });\n    \n//         if (!response.ok) {\n//           throw new Error('Failed to get devices');\n//         }\n    \n//         console.log('shuffling enabled');\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n// }\n\n// const Correct = () => {\n\n// }\n\nconst GetArtists = (artist_list) => {\n    return (\n\n        // {data ? data.items.map((item, index) => (\n        //     <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n        //   )) : 'Loading...'}\n        <div className='artist_wrap'>\n            {artist_list.map((artist, index) => (\n                <div key={index} className='artist'>{artist.name}{index == artist_list.length - 1 ? \"\" : \",\"} </div>\n            ))}\n        </div>\n    )\n}\n\nconst Game = () => {\n    const [songData, setSongData] = useState(null);\n    const [reavealed, setReavealed] = useState(false);\n    const [timeLeft, setTimeLeft] = useState(THINK_TIME);\n\n    // setReavealed(false);\n\n    useEffect(async () => {\n        // await set_volume(100);\n        await Shuffle();\n        // await Get_available_devices();\n    }, []);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            setTimeLeft(prevTimeLeft => {\n                if (prevTimeLeft === 0) {\n                    clearInterval(interval);\n                    return 0;\n                }\n                return prevTimeLeft - 1;\n            });\n        }, 1000);\n    \n        // Clean up the interval to avoid memory leaks\n        return () => clearInterval(interval);\n    }, [songData]); // Run only once on component mount\n    return (\n        <div>\n            <button className=\"skip\" onClick={async () => {\n            const result = await NextQuestion();\n            setSongData(result); \n            setReavealed(false);\n            setTimeLeft(THINK_TIME)\n            \n            \n            }}>Skip</button>\n            {/* {console.log(songData)} */}\n\n            <button className=\"skip\" onClick={() => \n                setReavealed(true)\n            }>Correct</button>\n\n            <button className=\"skip\" onClick={() => \n                setReavealed(false)\n            }>Hide</button>\n\n            <img className='track_image' src={songData && reavealed ? songData.cover : placeholder_playlist}></img>\n            <div className=\"answer_track\">Song: {songData && reavealed ? songData.name : \"\"}</div>\n            <div className=\"timer\">{`${Math.floor(timeLeft / 1000)} `}</div>\n            <div className=\"answer_artists\">Artist: {songData && reavealed ? GetArtists(songData.artists) : \"\"}</div>\n            <div className=\"timer_header\">Time Left:</div>\n            <div className=\"timer\">{`${timeLeft} `}</div>\n\n\n\n            \n            \n        </div>\n    )\n}\n\n// const PlayPlaylistButton = (playlistId) => {\n//   const playPlaylist = async () => {\n//     try {\n//       const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${accessToken}`,\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           context_uri: `spotify:playlist:${playlistId}`,\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to play playlist');\n//       }\n\n//       console.log('Playlist is now playing');\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <button onClick={playPlaylist}>\n//       Play Playlist\n//     </button>\n//   );\n// };\n\n\n\nconst Main = () => {\n\n\n  return (\n    <div>\n      <Header />\n      <PlaylistSelect />\n      <Game />\n\n\n    </div>\n  )\n  }\n\n\n\n\n\nexport default Main;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}