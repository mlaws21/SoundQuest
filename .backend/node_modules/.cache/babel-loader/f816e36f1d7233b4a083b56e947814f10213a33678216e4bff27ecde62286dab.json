{"ast":null,"code":"var _jsxFileName = \"/Users/mattlaws/personal/Spotify-Song-Trivia/src/components/Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { authorize } from \"../scripts.js\";\nimport \"./styles/Main.css\";\nimport placeholder_playlist from \"./images/placeholder_playlist.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANSWER_TIME = 6000;\nconst THINK_TIME = 6;\n// TODO can change these with a (easy, medium, hard) setting\n\nconst user_data = await authorize();\nconst profile_data = user_data.profile;\nconst accessToken = user_data.accessToken;\nconst Get_available_devices = async () => {\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me/player/devices', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to pause');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n  return null;\n};\n_c = Get_available_devices;\nconst set_volume = async vol => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/volume?volume_percent=${vol}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to change volume');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst pause = async () => {\n  try {\n    const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!pause_response.ok) {\n      throw new Error('Failed to pause');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n    return null; // Return null or handle the error as needed\n  }\n};\nconst pause_if_playing = async () => {\n  try {\n    const status_response = await fetch(`https://api.spotify.com/v1/me/player`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!status_response.ok) {\n      throw new Error('Failed to get status');\n    }\n    const data = await status_response.json();\n    if (data.is_playing) {\n      const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!pause_response.ok) {\n        throw new Error('Failed to pause');\n      }\n    }\n  } catch (error) {\n    console.error('Error:', error);\n    return null; // Return null or handle the error as needed\n  }\n};\nconst play = async () => {\n  try {\n    const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!play_response.ok) {\n      throw new Error('Failed to play');\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\nconst skip_helper = async () => {\n  const skip_response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`\n    }\n  });\n  if (!skip_response.ok) {\n    throw new Error('Failed to skip');\n  }\n  console.log('skipped');\n};\nconst current_player_helper = async () => {\n  const data_response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`\n    }\n  });\n  if (!data_response.ok) {\n    throw new Error('Failed to fetch data');\n  }\n  const data = await data_response.json();\n  return data;\n};\nconst seek_helper = async pos => {\n  const seek_response = await fetch(`https://api.spotify.com/v1/me/player/seek?position_ms=${pos}`, {\n    method: 'PUT',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`\n    }\n  });\n  if (!seek_response.ok) {\n    throw new Error('Failed to seek');\n  }\n};\nconst GetNextSongDataRandom = async () => {\n  try {\n    var _player_data, _player_data$item, _player_data2, _player_data2$item, _player_data3, _player_data3$item, _player_data4, _player_data4$item, _player_data5, _player_data5$item, _player_data5$item$al;\n    await set_volume(0);\n    const previous = await current_player_helper();\n    await skip_helper();\n    console.log(\"after skip\");\n    let player_data; // = await current_player_helper();\n\n    const fetchInterval = setInterval(async () => {\n      // Perform the action\n\n      console.log(\"fetching\");\n      player_data = await current_player_helper();\n      console.log(previous.item.name, player_data.item.name);\n\n      // Check the condition\n      if (player_data.item.name !== previous.item.name) {\n        clearInterval(fetchInterval); // Stop the interval\n      }\n    }, 1000); // Repeat every second (1000 milliseconds)\n\n    console.log(player_data.item.name);\n    const max_start = ((_player_data = player_data) === null || _player_data === void 0 ? void 0 : (_player_data$item = _player_data.item) === null || _player_data$item === void 0 ? void 0 : _player_data$item.duration_ms) - 30000;\n    const random_pos = Math.floor(Math.random() * max_start);\n    await seek_helper(random_pos);\n    await set_volume(100);\n    return {\n      \"duration\": (_player_data2 = player_data) === null || _player_data2 === void 0 ? void 0 : (_player_data2$item = _player_data2.item) === null || _player_data2$item === void 0 ? void 0 : _player_data2$item.duration_ms,\n      \"artists\": (_player_data3 = player_data) === null || _player_data3 === void 0 ? void 0 : (_player_data3$item = _player_data3.item) === null || _player_data3$item === void 0 ? void 0 : _player_data3$item.artists,\n      \"name\": (_player_data4 = player_data) === null || _player_data4 === void 0 ? void 0 : (_player_data4$item = _player_data4.item) === null || _player_data4$item === void 0 ? void 0 : _player_data4$item.name,\n      \"cover\": (_player_data5 = player_data) === null || _player_data5 === void 0 ? void 0 : (_player_data5$item = _player_data5.item) === null || _player_data5$item === void 0 ? void 0 : (_player_data5$item$al = _player_data5$item.album) === null || _player_data5$item$al === void 0 ? void 0 : _player_data5$item$al.images[0].url\n    };\n  } catch (error) {\n    console.error('Error:', error);\n    return null;\n  }\n};\n_c2 = GetNextSongDataRandom;\nconst playPlaylist = async playlistId => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        context_uri: `spotify:playlist:${playlistId}`\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to play playlist');\n    }\n    console.log('Playlist is now playing');\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst Shuffle = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/shuffle?state=true`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to shuffle');\n    }\n    console.log('shuffling enabled');\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n_c3 = Shuffle;\nconst GetArtists = artist_list => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"artist_wrap\",\n    children: artist_list.map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"artist\",\n      children: [artist.name, index == artist_list.length - 1 ? \"\" : \",\", \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 9\n  }, this);\n};\n_c4 = GetArtists;\nconst GetUserPlaylists = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/playlists`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get user playlists');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    return null;\n  }\n};\n_c5 = GetUserPlaylists;\nconst Game = () => {\n  _s();\n  const [songData, setSongData] = useState(null);\n  const [reavealed, setReavealed] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [songPlaying, setSongPlaying] = useState(false);\n  const isGameLive = useRef(false);\n  const skipped = useRef(false);\n  const [songCorrect, setSongCorrect] = useState(false);\n  const [artistCorrect, setArtistCorrect] = useState(false);\n  const [p1Score, setP1Score] = useState(0);\n  const [p2Score, setP2Score] = useState(0);\n  const [currentPlayer1, setCurrentPlayer1] = useState(false);\n  const [currentPlaylist, setCurrentPlaylist] = useState(null);\n  const [playlistData, setPlaylistData] = useState(null);\n  const [searchData, setSearchData] = useState(null);\n  // const playlistData = GetUserPlaylists();\n  const [query, setQuery] = useState(\"Search Here...\");\n  const preloaded = useRef(false);\n  const isPaused = useRef(false);\n  const safe_pause = async () => {\n    if (!isPaused.current) {\n      isPaused.current = true;\n      await pause();\n    }\n  };\n  const spotifySearch = async event => {\n    setQuery(event.target.value);\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/search?q=${event.target.value}&type=playlist&limit=50`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed search');\n      }\n      const data = await response.json();\n      setSearchData(data.playlists);\n\n      // console.log(data)\n    } catch (error) {\n      console.error(\"Error: \", error);\n    }\n  };\n  const GetPlaylist = playlist_json => {\n    var _playlist_json$images, _playlist_json$images2;\n    const handle_playlist_click = async playlist_data => {\n      await set_volume(0);\n      await playPlaylist(playlist_data.id);\n      setCurrentPlaylist(playlist_data);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"playlist_image\",\n        onClick: handle_playlist_click.bind(null, playlist_json),\n        src: (_playlist_json$images = (_playlist_json$images2 = playlist_json.images[0]) === null || _playlist_json$images2 === void 0 ? void 0 : _playlist_json$images2.url) !== null && _playlist_json$images !== void 0 ? _playlist_json$images : placeholder_playlist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"playlist_name\",\n        children: playlist_json.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 11\n    }, this);\n  };\n  const updateScore = () => {\n    const thisRound = (songCorrect ? 10 : 0) + (artistCorrect ? 10 : 0);\n    const thisRoundBonus = thisRound === 20 ? 5 : 0;\n    if (currentPlayer1) {\n      setP1Score(p1Score + thisRound + thisRoundBonus);\n    } else {\n      setP2Score(p2Score + thisRound + thisRoundBonus);\n    }\n    // console.log(p1Score, p2Score)\n  };\n  useEffect(() => {\n    const preProcesses = async () => {\n      const devices = await Get_available_devices();\n      console.log(devices);\n      await pause_if_playing();\n      isPaused.current = true;\n      await set_volume(100);\n      await Shuffle();\n      if (!playlistData) {\n        console.log(playlistData);\n        const fetchedPlData = await GetUserPlaylists();\n        setPlaylistData(fetchedPlData);\n      }\n    };\n    const atomic = async () => {\n      if (!preloaded.current) {\n        preloaded.current = true;\n        await preProcesses();\n      }\n    };\n    atomic();\n  }, []); // preloader\n\n  useEffect(() => {\n    if (!isGameLive.current) {\n      console.log(\"hello\");\n      return;\n    }\n    const interval = setInterval(() => {\n      setTimeLeft(prevTimeLeft => {\n        if (prevTimeLeft === 0) {\n          clearInterval(interval);\n          if (songPlaying) {\n            setTimeLeft(THINK_TIME);\n            setSongPlaying(false);\n          } else {\n            setReavealed(true);\n            if (isPaused.current) {\n              play();\n            }\n            isPaused.current = false;\n          }\n          return 0;\n        }\n        return prevTimeLeft - 1;\n      });\n    }, 1000);\n\n    // Clean up the interval to avoid memory leaks\n    return () => clearInterval(interval);\n  }, [songData, songPlaying]); // countdown\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed cron fetch');\n        }\n        const data = await response.json();\n        console.log(data); // This will log the data to the console\n\n        if (data.progress_ms + 20000 > data.item.duration_ms) {\n          console.log(\"pausing playback to stop overflow\");\n          await safe_pause();\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }, 15000);\n    return () => clearInterval(interval);\n  }, []); // check no song overflow\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"head\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"headerItem\",\n        id: \"title\",\n        children: \" Spotify Song Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"headerItem\",\n        id: \"profile_img\",\n        src: profile_data.profileImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"headerItem\",\n        id: \"username\",\n        children: [\" \", profile_data.displayName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 13\n    }, this), !currentPlaylist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"playlist_select\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist_box_label\",\n        children: \"User Playlists:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"playlist_select_box\",\n        children: playlistData ? playlistData.items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist\",\n          children: GetPlaylist(item)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 25\n        }, this)) : 'Loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchbar\",\n        type: \"text\",\n        value: query,\n        onChange: spotifySearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist_box_label\",\n        children: query\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"playlist_select_box\",\n        children: searchData ? searchData.items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist\",\n          children: GetPlaylist(item)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 25\n        }, this)) : 'Loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentPlaylist\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => {\n            if (reavealed || !isGameLive.current) {\n              setCurrentPlaylist(null);\n            }\n          },\n          className: \"playlist_image\",\n          src: currentPlaylist ? currentPlaylist.images[0].url : placeholder_playlist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"playlist_info\",\n          children: currentPlaylist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"track_image\",\n        src: songData && reavealed ? songData.cover : placeholder_playlist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer_track\",\n        children: [\"Song: \", songData && reavealed ? songData.name : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer_artists\",\n        children: [\"Artist: \", songData && reavealed ? GetArtists(songData.artists) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info_box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer\",\n          children: [\"Time Left: \", `${timeLeft} `]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"instructions\",\n          children: songPlaying ? \"Listen\" : \"Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: currentPlayer1 && isGameLive.current ? \"current_player\" : \"\",\n          className: \"score\",\n          children: p1Score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: !currentPlayer1 && isGameLive.current ? \"current_player\" : \"\",\n          className: \"score\",\n          children: p2Score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 17\n      }, this), reavealed || !isGameLive.current ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my_button\",\n        onClick: async () => {\n          const atomic = async () => {\n            console.log(songCorrect, artistCorrect);\n            updateScore();\n            setSongCorrect(false);\n            setArtistCorrect(false);\n            setCurrentPlayer1(!currentPlayer1);\n            skipped.current = false;\n            await set_volume(0);\n            setTimeLeft(THINK_TIME);\n            const result = await GetNextSongDataRandom();\n            if (result) {\n              isPaused.current = false;\n              setSongPlaying(true);\n              setSongData(result);\n              setReavealed(false);\n              isGameLive.current = true;\n\n              // need to jump this timer if we skip...\n              setTimeout(async () => {\n                if (!skipped.current) {\n                  await safe_pause();\n                }\n              }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n            }\n          };\n          await atomic();\n        },\n        children: isGameLive.current ? \"Next\" : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 21\n      }, this) : null, reavealed ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: songCorrect ? 'correct_button' : \"wrong_button\",\n          onClick: () => setSongCorrect(!songCorrect),\n          children: \"Song Correct?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: artistCorrect ? 'correct_button' : \"wrong_button\",\n          onClick: () => setArtistCorrect(!artistCorrect),\n          children: \"Artist Correct?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 25\n      }, this) : null, isGameLive.current && !reavealed ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my_button\",\n        onClick: async () => {\n          await safe_pause();\n          setTimeLeft(0);\n          setSongPlaying(songPlaying); // manually trigger the effect\n          skipped.current = true;\n        },\n        children: \"Skip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 494,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"0qqr+JeC2nTvCGEIIl1oJOV8jsI=\");\n_c6 = Game;\nconst Main = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 650,\n    columnNumber: 5\n  }, this);\n};\n_c7 = Main;\nexport default Main;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Get_available_devices\");\n$RefreshReg$(_c2, \"GetNextSongDataRandom\");\n$RefreshReg$(_c3, \"Shuffle\");\n$RefreshReg$(_c4, \"GetArtists\");\n$RefreshReg$(_c5, \"GetUserPlaylists\");\n$RefreshReg$(_c6, \"Game\");\n$RefreshReg$(_c7, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","useRef","authorize","placeholder_playlist","jsxDEV","_jsxDEV","ANSWER_TIME","THINK_TIME","user_data","profile_data","profile","accessToken","Get_available_devices","response","fetch","headers","ok","Error","data","json","error","console","log","_c","set_volume","vol","method","pause","pause_response","pause_if_playing","status_response","is_playing","play","play_response","skip_helper","skip_response","current_player_helper","data_response","seek_helper","pos","seek_response","GetNextSongDataRandom","_player_data","_player_data$item","_player_data2","_player_data2$item","_player_data3","_player_data3$item","_player_data4","_player_data4$item","_player_data5","_player_data5$item","_player_data5$item$al","previous","player_data","fetchInterval","setInterval","item","name","clearInterval","max_start","duration_ms","random_pos","Math","floor","random","artists","album","images","url","_c2","playPlaylist","playlistId","body","JSON","stringify","context_uri","Shuffle","_c3","GetArtists","artist_list","className","children","map","artist","index","length","fileName","_jsxFileName","lineNumber","columnNumber","_c4","GetUserPlaylists","_c5","Game","_s","songData","setSongData","reavealed","setReavealed","timeLeft","setTimeLeft","songPlaying","setSongPlaying","isGameLive","skipped","songCorrect","setSongCorrect","artistCorrect","setArtistCorrect","p1Score","setP1Score","p2Score","setP2Score","currentPlayer1","setCurrentPlayer1","currentPlaylist","setCurrentPlaylist","playlistData","setPlaylistData","searchData","setSearchData","query","setQuery","preloaded","isPaused","safe_pause","current","spotifySearch","event","target","value","playlists","GetPlaylist","playlist_json","_playlist_json$images","_playlist_json$images2","handle_playlist_click","playlist_data","id","onClick","bind","src","updateScore","thisRound","thisRoundBonus","preProcesses","devices","fetchedPlData","atomic","interval","prevTimeLeft","progress_ms","profileImage","displayName","items","type","onChange","cover","result","setTimeout","_c6","Main","_c7","$RefreshReg$"],"sources":["/Users/mattlaws/personal/Spotify-Song-Trivia/src/components/Main.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport {authorize} from \"../scripts.js\"\nimport \"./styles/Main.css\"\nimport placeholder_playlist from \"./images/placeholder_playlist.png\"\n\nconst ANSWER_TIME = 6000\nconst THINK_TIME = 6\n// TODO can change these with a (easy, medium, hard) setting\n\nconst user_data = await authorize();\n\nconst profile_data = user_data.profile;\nconst accessToken = user_data.accessToken;\n\n\nconst Get_available_devices = async () => {\n    try {\n        const response = await fetch('https://api.spotify.com/v1/me/player/devices', {\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            }\n        })\n        \n        if (!response.ok) {\n            throw new Error('Failed to pause');\n        }\n\n        const data = await response.json();\n\n        return data;\n\n    } catch (error) {\n        console.log(\"Error: \", error)\n    }\n\n    return null\n}\n\nconst set_volume = async (vol) => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/volume?volume_percent=${vol}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to change volume');\n        }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\n\nconst pause = async () => {\n    try {\n        const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n            },\n        });\n\n        if (!pause_response.ok) {\n            throw new Error('Failed to pause');\n        }\n    } catch (error) {\n        console.error('Error:', error);\n        return null; // Return null or handle the error as needed\n    }\n}\n\nconst pause_if_playing = async () => {\n    try {\n        const status_response = await fetch(`https://api.spotify.com/v1/me/player`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n            },\n        });\n\n        if (!status_response.ok) {\n            throw new Error('Failed to get status');\n        }\n\n        const data = await status_response.json();\n        if (data.is_playing) {\n\n            const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n                method: 'PUT',\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`,\n                },\n            });\n\n            if (!pause_response.ok) {\n                throw new Error('Failed to pause');\n            }\n\n        }\n\n    } catch (error) {\n        console.error('Error:', error);\n        return null; // Return null or handle the error as needed\n    }\n}\n\n\nconst play = async () => {\n   \n    try { \n        const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n            method: 'PUT',\n                headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n                },\n        });\n    \n        if (!play_response.ok) {\n            throw new Error('Failed to play');\n        }\n    } catch (error) {\n        console.error(\"Error:\", error)\n    }\n}\n\nconst skip_helper = async () => {\n\n    const skip_response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n        },\n    });\n\n    if (!skip_response.ok) {\n        throw new Error('Failed to skip');\n    }\n\n    console.log('skipped');\n\n}\n\nconst current_player_helper = async () => {\n    const data_response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n        headers: {\n            'Authorization': `Bearer ${accessToken}`\n        }\n    });\n\n    if (!data_response.ok) {\n        throw new Error('Failed to fetch data');\n    }\n\n    const data = await data_response.json();\n    return data;\n}\n\nconst seek_helper = async (pos) => {\n    const seek_response = await fetch(`https://api.spotify.com/v1/me/player/seek?position_ms=${pos}`, {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n        },\n    });\n\n    if (!seek_response.ok) {\n        throw new Error('Failed to seek');\n    }\n}\n\n\nconst GetNextSongDataRandom = async () => {\n    try {\n        await set_volume(0);\n\n        const previous = await current_player_helper()\n\n        await skip_helper();\n        console.log(\"after skip\")\n\n        \n        let player_data// = await current_player_helper();\n\n\n        const fetchInterval = setInterval(async () => {\n            // Perform the action\n        \n            console.log(\"fetching\");\n            player_data = await current_player_helper();\n            console.log(previous.item.name, player_data.item.name)\n\n\n            // Check the condition\n            if (player_data.item.name !== previous.item.name) {\n                clearInterval(fetchInterval); // Stop the interval\n            }\n\n\n\n        }, 1000); // Repeat every second (1000 milliseconds)\n\n        console.log(player_data.item.name)\n\n        const max_start = player_data?.item?.duration_ms - 30000;\n\n        const random_pos = Math.floor(Math.random() * max_start);\n\n        await seek_helper(random_pos);\n\n        await set_volume(100);\n\n        return {\n            \"duration\": player_data?.item?.duration_ms,\n            \"artists\": player_data?.item?.artists,\n            \"name\": player_data?.item?.name,\n            \"cover\": player_data?.item?.album?.images[0].url\n        };\n    } catch (error) {\n        console.error('Error:', error);\n        return null;\n    }\n};\n\n\n\nconst playPlaylist = async (playlistId) => {\n\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                context_uri: `spotify:playlist:${playlistId}`,\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to play playlist');\n        }\n\n        console.log('Playlist is now playing');\n\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\nconst Shuffle = async () => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/shuffle?state=true`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to shuffle');\n        }\n\n        console.log('shuffling enabled');\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\n\nconst GetArtists = (artist_list) => {\n    return (\n\n        <div className='artist_wrap'>\n            {artist_list.map((artist, index) => (\n                <div key={index} className='artist'>{artist.name}{index == artist_list.length - 1 ? \"\" : \",\"} </div>\n            ))}\n        </div>\n    )\n}\n\nconst GetUserPlaylists = async () => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/playlists`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to get user playlists');\n        }\n        \n        const data = await response.json();\n    \n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        return null;\n    }\n}\n\nconst Game = () => {\n    const [songData, setSongData] = useState(null);\n    const [reavealed, setReavealed] = useState(false);\n    const [timeLeft, setTimeLeft] = useState(0);\n    const [songPlaying, setSongPlaying] = useState(false);\n    const isGameLive = useRef(false);\n    const skipped = useRef(false);\n    const [songCorrect, setSongCorrect] = useState(false);\n    const [artistCorrect, setArtistCorrect] = useState(false);\n    const [p1Score, setP1Score] = useState(0);\n    const [p2Score, setP2Score] = useState(0);\n    const [currentPlayer1, setCurrentPlayer1] = useState(false);\n    const [currentPlaylist, setCurrentPlaylist] = useState(null);\n    const [playlistData, setPlaylistData] = useState(null);\n    const [searchData, setSearchData] = useState(null);\n    // const playlistData = GetUserPlaylists();\n    const [query, setQuery] = useState(\"Search Here...\");\n    const preloaded = useRef(false);\n    const isPaused = useRef(false);\n\n\n    const safe_pause = async () => {\n        if (!isPaused.current) {\n            isPaused.current = true;\n            await pause();\n        }\n        \n    }\n    const spotifySearch = async (event) => {\n        setQuery(event.target.value);\n\n        try {\n\n        const response = await fetch(`https://api.spotify.com/v1/search?q=${event.target.value}&type=playlist&limit=50`, {\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed search');\n        }\n        const data = await response.json();\n\n        setSearchData(data.playlists)\n\n        // console.log(data)\n        } catch (error) {\n            console.error(\"Error: \", error)\n        }\n\n\n    };\n\n    const GetPlaylist = (playlist_json) => {\n        \n\n        const handle_playlist_click = async (playlist_data) => {\n    \n            await set_volume(0);\n            await playPlaylist(playlist_data.id);\n            setCurrentPlaylist(playlist_data);\n    \n        }\n        \n        return (\n          <div>\n            <img className='playlist_image' onClick={handle_playlist_click.bind(null, playlist_json)} src={playlist_json.images[0]?.url ?? placeholder_playlist}></img>\n            <p className='playlist_name'>{playlist_json.name}</p>\n            \n          </div>\n        );\n    };\n\n    const updateScore = () => {\n        const thisRound = (songCorrect ? 10 : 0) +  (artistCorrect ? 10 : 0)\n        const thisRoundBonus = thisRound === 20 ? 5 : 0\n        if (currentPlayer1) {\n            setP1Score(p1Score + thisRound + thisRoundBonus)\n            \n        } else {\n            setP2Score(p2Score + thisRound + thisRoundBonus)\n\n        }\n        // console.log(p1Score, p2Score)\n\n    }\n\n\n    useEffect(() => {\n        const preProcesses = async () => {\n            const devices = await Get_available_devices();\n            console.log(devices);\n            await pause_if_playing();\n            isPaused.current = true;\n            await set_volume(100);\n            await Shuffle();\n            if (!playlistData) {\n\n                console.log(playlistData)\n                const fetchedPlData = await GetUserPlaylists();\n                setPlaylistData(fetchedPlData)\n            }\n            \n\n        };\n        \n        const atomic = async () => {\n            if (!preloaded.current) {\n                preloaded.current = true;\n                await preProcesses();\n\n\n            }\n        };\n\n        atomic();\n    }, []); // preloader\n    \n    useEffect(() => {\n        if (!isGameLive.current) {\n            console.log(\"hello\")\n            return;\n        }\n\n        const interval = setInterval(() => {\n            setTimeLeft(prevTimeLeft => {\n                if (prevTimeLeft === 0) {\n                    clearInterval(interval);\n\n                    if (songPlaying) {\n                        setTimeLeft(THINK_TIME);\n                        setSongPlaying(false);\n                    } else {\n                        setReavealed(true)\n                        if (isPaused.current) {\n                            play();\n                        }\n                        isPaused.current = false;\n                    }\n                    \n                    return 0;\n                }\n                return prevTimeLeft - 1;\n            });\n        }, 1000);\n\n        // Clean up the interval to avoid memory leaks\n        return () => clearInterval(interval);\n    }, [songData, songPlaying]); // countdown\n\n\n    useEffect(() => {\n\n        const interval = setInterval(async () => {\n            try {\n                const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`\n                    }\n                });\n\n                if (!response.ok) {\n                    throw new Error('Failed cron fetch');\n                }\n                \n                const data = await response.json();\n                console.log(data); // This will log the data to the console\n\n                if (data.progress_ms + 20000 > data.item.duration_ms) {\n                    console.log(\"pausing playback to stop overflow\")\n                    await safe_pause();\n                }\n            \n                \n                \n            } catch (error) {\n                console.error('Error:', error);\n            }\n\n        }, 15000);\n        \n        return () => clearInterval(interval);\n    }, []); // check no song overflow\n\n    return (\n        <div>\n            {/* HEADER */}\n            <div id=\"head\">\n                {/* <section id=\"profile\"> */}\n                <h1 className=\"headerItem\" id=\"title\"> Spotify Song Trivia</h1>\n                <img className=\"headerItem\"  id=\"profile_img\" src={profile_data.profileImage} />\n\n                <h2 className=\"headerItem\"  id=\"username\"> {profile_data.displayName}</h2> \n                {/* <ul> */}\n                    {/* <li>User ID: <span id=\"id\"></span></li> */}\n                    {/* <li>Email: {profile_data.email}</li> */}\n                {/* </ul> */}\n                {/* </section> */}\n\n            </div>\n\n            {/* PLAYLIST */}\n            \n            {!currentPlaylist ?\n                <div id=\"playlist_select\">\n                    <div className='playlist_box_label'>User Playlists:</div>\n                    <div id=\"playlist_select_box\">\n\n                        \n\n                        {playlistData ? playlistData.items.map((item, index) => (\n                        <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n                        )) : 'Loading...'}\n\n                    </div> \n\n                    <input className=\"searchbar\" type=\"text\" value={query} onChange={spotifySearch} />\n                    <div className=\"playlist_box_label\">{query}</div>\n\n                    <div id=\"playlist_select_box\">  \n\n                        {searchData ? searchData.items.map((item, index) => (\n                        <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n                        )) : 'Loading...'}\n\n                    </div> \n                    \n\n                </div>\n                :\n\n                <div className='game_main'> \n                <div className='currentPlaylist'>\n                    {/* <div className='my_button' id='playlist_info'>Select new playlist</div> */}\n                    <img onClick={() => {if (reavealed || !isGameLive.current) {setCurrentPlaylist(null)}}}className='playlist_image' src={currentPlaylist ? currentPlaylist.images[0].url : placeholder_playlist}></img>\n                    <div id='playlist_info'>{currentPlaylist.name}</div>\n\n                </div>\n                <img className='track_image' src={songData && reavealed ? songData.cover : placeholder_playlist}></img>\n                <div className=\"answer_track\">Song: {songData && reavealed ? songData.name : \"\"}</div>\n                <div className=\"answer_artists\">Artist: {songData && reavealed ? GetArtists(songData.artists) : \"\"}</div>\n\n                <div className='info_box'>\n                    <div className=\"timer\">Time Left: {`${timeLeft} `}</div>\n                    <div className=\"instructions\">{songPlaying ? \"Listen\" : \"Answer\"}</div>\n\n                </div>\n\n                <div>\n                    <div id={(currentPlayer1 && isGameLive.current) ? \"current_player\" : \"\"} className='score'>{p1Score}</div>\n                    <div id={(!currentPlayer1 && isGameLive.current) ? \"current_player\" : \"\"} className='score'>{p2Score}</div>\n                </div>\n\n\n                {/* GAME */}\n                {\n                    reavealed || !isGameLive.current ? \n                    <div className=\"my_button\" onClick={\n                        async () => {\n\n                            const atomic = async () => {\n                                console.log(songCorrect, artistCorrect)\n                                updateScore()\n                                setSongCorrect(false);\n                                setArtistCorrect(false);\n                                setCurrentPlayer1(!currentPlayer1)\n                                skipped.current = false\n                                await set_volume(0)\n                                setTimeLeft(THINK_TIME)\n                                const result = await GetNextSongDataRandom()\n                                if (result) {\n                                    \n                                    isPaused.current = false;\n                                    setSongPlaying(true)\n                                    setSongData(result); \n                                    setReavealed(false);\n                                    isGameLive.current = true;\n                                    \n                                    // need to jump this timer if we skip...\n                                    setTimeout(async () => {\n                                        if (!skipped.current) {\n                                            await safe_pause();\n\n                                        }\n                                    }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n                                }\n                            }\n\n                            await atomic()\n                        }\n                    \n                    }>{isGameLive.current ? \"Next\" : \"Start\"}</div> : null\n                }\n\n                {\n                    reavealed ? \n                        <div>\n                            <div className={songCorrect ? 'correct_button' : \"wrong_button\"}\n                            onClick={\n                                () => setSongCorrect(!songCorrect)\n                            }\n                            >Song Correct?</div>\n                            <div className={artistCorrect ? 'correct_button' : \"wrong_button\"}\n                            onClick={\n                                () => setArtistCorrect(!artistCorrect)\n                            }\n                            >Artist Correct?</div>\n                        </div> : null\n                }\n\n                {isGameLive.current && !reavealed ? \n                    <div className='my_button'\n                        onClick={\n                            async () => {\n                                await safe_pause()\n                                setTimeLeft(0)\n                                setSongPlaying(songPlaying) // manually trigger the effect\n                                skipped.current = true;\n                            }\n                        }\n                    \n                    >Skip</div>\n                    : null}\n\n            </div>\n                \n            }\n\n            \n\n\n\n            \n            \n        </div>\n    )\n}\n\n\nconst Main = () => {\n  return (\n    <div>\n      <Game />\n\n\n    </div>\n  )\n  }\n\n\n\n\n\nexport default Main;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}