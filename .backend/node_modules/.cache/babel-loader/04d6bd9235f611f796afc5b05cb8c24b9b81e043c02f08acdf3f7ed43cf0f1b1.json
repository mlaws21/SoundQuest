{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nconst CALLBACK = \"http://localhost:3000/callback\";\nconst params = new URLSearchParams(window.location.search);\nconst code = params.get(\"code\");\nfunction outputUI(profile) {\n  var _profile$images$1$url, _profile$images$;\n  return {\n    displayName: profile.display_name,\n    id: profile.id,\n    email: profile.email,\n    uri: profile.uri,\n    profileImage: (_profile$images$1$url = (_profile$images$ = profile.images[1]) === null || _profile$images$ === void 0 ? void 0 : _profile$images$.url) !== null && _profile$images$1$url !== void 0 ? _profile$images$1$url : 'placeholder.jpg'\n  };\n}\nasync function fetchProfile(token) {\n  const result = await fetch(\"https://api.spotify.com/v1/me\", {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return await result.json();\n}\nexport async function redirectToAuthCodeFlow(clientId) {\n  const verifier = generateCodeVerifier(128);\n  const challenge = await generateCodeChallenge(verifier);\n  localStorage.setItem(\"verifier\", verifier);\n  const params = new URLSearchParams();\n  params.append(\"client_id\", clientId);\n  params.append(\"response_type\", \"code\");\n  params.append(\"redirect_uri\", CALLBACK);\n  params.append(\"scope\", \"user-read-private user-read-email\");\n  params.append(\"code_challenge_method\", \"S256\");\n  params.append(\"code_challenge\", challenge);\n  document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n}\nexport async function getAccessToken(clientId, code) {\n  const verifier = localStorage.getItem(\"verifier\");\n  const params = new URLSearchParams();\n  params.append(\"client_id\", clientId);\n  params.append(\"grant_type\", \"authorization_code\");\n  params.append(\"code\", code);\n  params.append(\"redirect_uri\", CALLBACK);\n  params.append(\"code_verifier\", verifier);\n  const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: params\n  });\n  const {\n    access_token,\n    expires_in\n  } = await result.json();\n  const expirationTime = Date.now() + 360000; // Convert seconds to milliseconds\n\n  localStorage.setItem('accessToken', access_token);\n  localStorage.setItem('tokenExpiration', expirationTime.toString());\n  return access_token;\n}\nfunction generateCodeVerifier(length) {\n  let text = '';\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nasync function generateCodeChallenge(codeVerifier) {\n  const data = new TextEncoder().encode(codeVerifier);\n  const digest = await window.crypto.subtle.digest('SHA-256', data);\n  return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)])).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n}\nexport async function authorize() {\n  const clientId = \"379e50830b614f5da69a1b198f950418\"; // Replace with your Spotify client ID\n\n  if (!code) {\n    redirectToAuthCodeFlow(clientId);\n    return;\n  }\n  const accessToken = await getAccessToken(clientId, code);\n  const profile = await fetchProfile(accessToken);\n  console.log(profile); // Profile data logs to console\n  console.log(accessToken); // Profile data logs to console\n  // const decodedToken = jwtDecode(accessToken);\n\n  // console.log(decodedToken);\n\n  return {\n    \"accessToken\": accessToken,\n    \"profile\": outputUI(profile)\n  };\n}","map":{"version":3,"names":["jwtDecode","CALLBACK","params","URLSearchParams","window","location","search","code","get","outputUI","profile","_profile$images$1$url","_profile$images$","displayName","display_name","id","email","uri","profileImage","images","url","fetchProfile","token","result","fetch","method","headers","Authorization","json","redirectToAuthCodeFlow","clientId","verifier","generateCodeVerifier","challenge","generateCodeChallenge","localStorage","setItem","append","document","toString","getAccessToken","getItem","body","access_token","expires_in","expirationTime","Date","now","length","text","possible","i","charAt","Math","floor","random","codeVerifier","data","TextEncoder","encode","digest","crypto","subtle","btoa","String","fromCharCode","apply","Uint8Array","replace","authorize","accessToken","console","log"],"sources":["/Users/mattlaws/personal/spotify_react/src/scripts.js"],"sourcesContent":["import {jwtDecode} from 'jwt-decode';\n\nconst CALLBACK = \"http://localhost:3000/callback\";\n\nconst params = new URLSearchParams(window.location.search);\nconst code = params.get(\"code\");\n\nfunction outputUI(profile) {\n    return {\n        displayName: profile.display_name,\n        id: profile.id,\n        email: profile.email,\n        uri: profile.uri,\n        profileImage: profile.images[1]?.url ?? 'placeholder.jpg',\n    };\n}\n\nasync function fetchProfile(token) {\n    const result = await fetch(\"https://api.spotify.com/v1/me\", {\n        method: \"GET\",\n        headers: { Authorization: `Bearer ${token}` },\n    });\n\n    return await result.json();\n}\n\nexport async function redirectToAuthCodeFlow(clientId) {\n    const verifier = generateCodeVerifier(128);\n    const challenge = await generateCodeChallenge(verifier);\n\n    localStorage.setItem(\"verifier\", verifier);\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"response_type\", \"code\");\n    params.append(\"redirect_uri\", CALLBACK);\n    params.append(\"scope\", \"user-read-private user-read-email\");\n    params.append(\"code_challenge_method\", \"S256\");\n    params.append(\"code_challenge\", challenge);\n\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n}\n\nexport async function getAccessToken(clientId, code) {\n    const verifier = localStorage.getItem(\"verifier\");\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"grant_type\", \"authorization_code\");\n    params.append(\"code\", code);\n    params.append(\"redirect_uri\", CALLBACK);\n    params.append(\"code_verifier\", verifier);\n\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        body: params,\n    });\n\n    const { access_token, expires_in } = await result.json();\n    const expirationTime = Date.now() + 360000; // Convert seconds to milliseconds\n\n    localStorage.setItem('accessToken', access_token);\n    localStorage.setItem('tokenExpiration', expirationTime.toString());\n\n    return access_token;\n}\n\nfunction generateCodeVerifier(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nasync function generateCodeChallenge(codeVerifier) {\n    const data = new TextEncoder().encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)]))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n}\n\nexport async function authorize() {\n    const clientId = \"379e50830b614f5da69a1b198f950418\"; // Replace with your Spotify client ID\n\n    if (!code) {\n        redirectToAuthCodeFlow(clientId);\n        return;\n    }\n\n    const accessToken = await getAccessToken(clientId, code);\n    \n    const profile = await fetchProfile(accessToken);\n    console.log(profile); // Profile data logs to console\n    console.log(accessToken); // Profile data logs to console\n    // const decodedToken = jwtDecode(accessToken);\n    \n    // console.log(decodedToken);\n    \n    return {\"accessToken\": accessToken, \"profile\": outputUI(profile)}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}