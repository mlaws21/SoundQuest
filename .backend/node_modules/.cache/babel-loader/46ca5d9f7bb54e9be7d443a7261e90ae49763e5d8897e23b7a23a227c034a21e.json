{"ast":null,"code":"var _jsxFileName = \"/Users/mattlaws/personal/Spotify-Song-Trivia/src/components/Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { authorize } from \"../scripts.js\";\nimport \"./styles/Main.css\";\nimport placeholder_playlist from \"./images/placeholder_playlist.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANSWER_TIME = 6000;\nconst THINK_TIME = 6;\n// TODO can change these with a (easy, medium, hard) setting\n// TODO allow fo playlist searching (get category playlist)\n\nconst user_data = await authorize();\nconst profile_data = user_data.profile;\nconst accessToken = user_data.accessToken;\nconst Get_available_devices = async () => {\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me/player/devices', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error('Failed to pause');\n    }\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n  return null;\n};\n_c = Get_available_devices;\nconst set_volume = async vol => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/volume?volume_percent=${vol}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to change volume');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst pause = async () => {\n  try {\n    const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!pause_response.ok) {\n      throw new Error('Failed to pause');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n    return null; // Return null or handle the error as needed\n  }\n};\nconst play = async () => {\n  try {\n    const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!play_response.ok) {\n      throw new Error('Failed to play');\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\nconst blind_play = async () => {\n  try {\n    // Start playing the song\n    await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        // Add your song URI or context here\n      })\n    });\n\n    // Poll the player state to check for end of song\n    const interval = setInterval(async () => {\n      const response = await fetch('https://api.spotify.com/v1/me/player', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      const playerState = await response.json();\n      if (!playerState.is_playing) {\n        clearInterval(interval);\n        // Pause playback at the end of the song\n        await fetch('https://api.spotify.com/v1/me/player/pause', {\n          method: 'PUT',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`\n          }\n        });\n      }\n    }, 1000); // Check every second\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst GetNextSongDataRandom = async () => {\n  try {\n    var _data$item, _data$item2, _data$item3, _data$item4, _data$item5, _data$item5$album;\n    await set_volume(0);\n    const skip_response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!skip_response.ok) {\n      throw new Error('Failed to skip');\n    }\n    console.log('skipped');\n    const data_response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!data_response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await data_response.json();\n    const max_start = (data === null || data === void 0 ? void 0 : (_data$item = data.item) === null || _data$item === void 0 ? void 0 : _data$item.duration_ms) - 30000;\n    const random_pos = Math.floor(Math.random() * max_start);\n    const seek_response = await fetch(`https://api.spotify.com/v1/me/player/seek?position_ms=${random_pos}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!seek_response.ok) {\n      throw new Error('Failed to seek');\n    }\n    await set_volume(100);\n    return {\n      \"duration\": data === null || data === void 0 ? void 0 : (_data$item2 = data.item) === null || _data$item2 === void 0 ? void 0 : _data$item2.duration_ms,\n      \"artists\": data === null || data === void 0 ? void 0 : (_data$item3 = data.item) === null || _data$item3 === void 0 ? void 0 : _data$item3.artists,\n      \"name\": data === null || data === void 0 ? void 0 : (_data$item4 = data.item) === null || _data$item4 === void 0 ? void 0 : _data$item4.name,\n      \"cover\": data === null || data === void 0 ? void 0 : (_data$item5 = data.item) === null || _data$item5 === void 0 ? void 0 : (_data$item5$album = _data$item5.album) === null || _data$item5$album === void 0 ? void 0 : _data$item5$album.images[0].url\n    };\n  } catch (error) {\n    console.error('Error:', error);\n    return null;\n  }\n};\n_c2 = GetNextSongDataRandom;\nconst playPlaylist = async playlistId => {\n  // Get_available_devices()\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        context_uri: `spotify:playlist:${playlistId}`\n        // context_uri: `spotify:track:4iV5W9uYEdYUVa79Axb7Rh`,\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to play playlist');\n    }\n    console.log('Playlist is now playing');\n    // Get_current_song_data()\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n\n// const GetPlaylist = (playlist_json) => {\n\n//     const handle_playlist_click = (playlist_id) => {\n\n//         set_volume(0)\n//         playPlaylist(playlist_id);\n\n//     }\n\n//     return (\n//       <div>\n//         <img className='playlist_image' onClick={handle_playlist_click.bind(null, playlist_json.id)} src={playlist_json.images[0]?.url ?? placeholder_playlist}></img>\n//         <p className='playlist_name'>{playlist_json.name}</p>\n\n//       </div>\n//     );\n// };\n\n// const PlaylistSelect = () => {\n//   const [data, setData] = useState(null);\n\n//   useEffect(() => {\n//     fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n// headers: {\n//   'Authorization': `Bearer ${accessToken}`\n// }\n// })\n//       .then(response => response.json())\n//       .then(json => setData(json))\n//       .catch(error => console.error(error));\n//   }, []);\n\n//   // data ? console.log(data.items[4]) : console.log(\"pending\")\n\n//   return (\n//     <div id=\"playlist_select\">\n\n//       {data ? data.items.map((item, index) => (\n//         <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n//       )) : 'Loading...'}\n\n//     </div>\n\n//   );\n// }\n\n// function Header() {\n//   // displayName: profile.display_name,\n//   // id: profile.id,\n//   // email: profile.email,\n//   // uri: profile.uri,\n//   // profileImage: profileImage\n//   return (\n//         <div id=\"head\">\n//             {/* <section id=\"profile\"> */}\n//             <h1 className=\"headerItem\" id=\"title\"> Spotify Song Trivia</h1>\n//             <img className=\"headerItem\"  id=\"profile_img\" src={profile_data.profileImage} />\n\n//             <h2 className=\"headerItem\"  id=\"username\"> {profile_data.displayName}</h2> \n//             {/* <ul> */}\n//                 {/* <li>User ID: <span id=\"id\"></span></li> */}\n//                 {/* <li>Email: {profile_data.email}</li> */}\n//             {/* </ul> */}\n//             {/* </section> */}\n\n//         </div>\n//   );\n// }\n\nconst Skip = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to skip');\n    }\n    console.log('skipped');\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n_c3 = Skip;\nconst Shuffle = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/shuffle?state=true`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to shuffle');\n    }\n    console.log('shuffling enabled');\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n_c4 = Shuffle;\nconst NextQuestion = async () => {\n  const song_data = await GetNextSongDataRandom();\n  // Get_available_devices()\n  return song_data;\n  // await Skip()\n\n  // Skip()\n};\n\n// const Get_devices = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/devices`, {\n//           method: 'GET',\n//           headers: {\n//             'Authorization': `Bearer ${accessToken}`,\n//           },\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to get devices');\n//         }\n\n//         console.log('shuffling enabled');\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n// }\n\n// const Correct = () => {\n\n// }\n_c5 = NextQuestion;\nconst GetArtists = artist_list => {\n  return (\n    /*#__PURE__*/\n    // {data ? data.items.map((item, index) => (\n    //     <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n    //   )) : 'Loading...'}\n    _jsxDEV(\"div\", {\n      className: \"artist_wrap\",\n      children: artist_list.map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"artist\",\n        children: [artist.name, index == artist_list.length - 1 ? \"\" : \",\", \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n// const GetUserPlaylists = () => {\n//     console.log(\"stupud\")\n// //     const [data, setData] = useState(null);\n\n// //     useEffect(() => {\n// //       fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n// //   headers: {\n// //     'Authorization': `Bearer ${accessToken}`\n// //   }\n// //   })\n// //         .then(response => response.json())\n// //         .then(json => setData(json))\n// //         .catch(error => console.error(error));\n// //     }, []);\n// //     return data\n// }\n_c6 = GetArtists;\nconst GetUserPlaylists = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/playlists?limit=50&offset=0`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    const data = await response.json();\n    // console.log(data); // This will log the data to the console\n\n    if (!response.ok) {\n      throw new Error('Failed to get user playlists');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    return null;\n  }\n};\n\n// const spotifySearch = (query) => {\n//     console.log(query);\n// }\n_c7 = GetUserPlaylists;\nconst Game = () => {\n  _s();\n  const [songData, setSongData] = useState(null);\n  const [reavealed, setReavealed] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [songPlaying, setSongPlaying] = useState(false);\n  const isGameLive = useRef(false);\n  const skipped = useRef(false);\n  const [songCorrect, setSongCorrect] = useState(false);\n  const [artistCorrect, setArtistCorrect] = useState(false);\n  const [p1Score, setP1Score] = useState(0);\n  const [p2Score, setP2Score] = useState(0);\n  const [currentPlayer1, setCurrentPlayer1] = useState(false);\n  const [currentPlaylist, setCurrentPlaylist] = useState(null);\n  const [playlistData, setPlaylistData] = useState(null);\n  // const playlistData = GetUserPlaylists();\n  const [query, setQuery] = useState(\"Search Here...\");\n  const spotifySearch = async event => {\n    setQuery(event.target.value);\n    // console.log(query)\n    // const response = await fetch(`https://api.spotify.com/v1/search?q=${query}&type=track,album,artist,playlist`, {\n    //     headers: {\n    //         'Authorization': `Bearer ${accessToken}`\n    //     }\n    // });\n    // const data = await response.json();\n\n    // console.log(data)\n  };\n\n  // const GetUserPlaylists = () => {\n  //     const [data, setData] = useState(null);\n  //     useEffect(() => {\n  //         if (!playlistData) {\n\n  //             fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n  //                 headers: {\n  //                     'Authorization': `Bearer ${accessToken}`\n  //                 }\n  //             })\n  //             .then(response => response.json())\n  //             .then(json => setData(json))\n  //             .catch(error => console.error(error));\n  //         }\n\n  //     }, []);\n  //     setPlaylistData(data)\n  // }\n\n  const GetPlaylist = playlist_json => {\n    var _playlist_json$images, _playlist_json$images2;\n    const handle_playlist_click = async playlist_data => {\n      await set_volume(0);\n      await playPlaylist(playlist_data.id);\n      setCurrentPlaylist(playlist_data);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"playlist_image\",\n        onClick: handle_playlist_click.bind(null, playlist_json),\n        src: (_playlist_json$images = (_playlist_json$images2 = playlist_json.images[0]) === null || _playlist_json$images2 === void 0 ? void 0 : _playlist_json$images2.url) !== null && _playlist_json$images !== void 0 ? _playlist_json$images : placeholder_playlist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"playlist_name\",\n        children: playlist_json.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 11\n    }, this);\n  };\n  const updateScore = () => {\n    const thisRound = (songCorrect ? 10 : 0) + (artistCorrect ? 10 : 0);\n    const thisRoundBonus = thisRound === 20 ? 5 : 0;\n    if (currentPlayer1) {\n      setP1Score(p1Score + thisRound + thisRoundBonus);\n    } else {\n      setP2Score(p2Score + thisRound + thisRoundBonus);\n    }\n    // console.log(p1Score, p2Score)\n  };\n  useEffect(() => {\n    const preProcesses = async () => {\n      const devices = await Get_available_devices();\n      console.log(devices);\n      await pause();\n      await set_volume(100);\n      await Shuffle();\n      const fetchedPlData = await GetUserPlaylists();\n      setPlaylistData(fetchedPlData);\n    };\n    preProcesses();\n  }, []); // preloader\n\n  useEffect(() => {\n    if (!isGameLive.current) {\n      console.log(\"hello\");\n      return;\n    }\n    const interval = setInterval(() => {\n      setTimeLeft(prevTimeLeft => {\n        if (prevTimeLeft === 0) {\n          clearInterval(interval);\n          if (songPlaying) {\n            setTimeLeft(THINK_TIME);\n            setSongPlaying(false);\n          } else {\n            setReavealed(true);\n            blind_play();\n          }\n          return 0;\n        }\n        return prevTimeLeft - 1;\n      });\n    }, 1000);\n\n    // Clean up the interval to avoid memory leaks\n    return () => clearInterval(interval);\n  }, [songData, songPlaying]); // countdown\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`\n          }\n        });\n        const data = await response.json();\n        console.log(data); // This will log the data to the console\n\n        if (data.progress_ms + 20000 > data.item.duration_ms) {\n          console.log(\"pausing playback to stop overflow\");\n          pause();\n        }\n        if (!response.ok) {\n          throw new Error('Failed cron fetch');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }, 15000);\n    return () => clearInterval(interval);\n  }, []); // check no song overflow\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"head\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"headerItem\",\n        id: \"title\",\n        children: \" Spotify Song Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"headerItem\",\n        id: \"profile_img\",\n        src: profile_data.profileImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"headerItem\",\n        id: \"username\",\n        children: [\" \", profile_data.displayName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 13\n    }, this), !currentPlaylist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"playlist_select\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist_box_label\",\n        children: \"User Playlists:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"playlist_select_box\",\n        children: playlistData ? playlistData.items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist\",\n          children: GetPlaylist(item)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 25\n        }, this)) : 'Loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentPlaylist\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => setCurrentPlaylist(null),\n          className: \"playlist_image\",\n          src: currentPlaylist ? currentPlaylist.images[0].url : placeholder_playlist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"playlist_info\",\n          children: currentPlaylist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"track_image\",\n        src: songData && reavealed ? songData.cover : placeholder_playlist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer_track\",\n        children: [\"Song: \", songData && reavealed ? songData.name : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer_artists\",\n        children: [\"Artist: \", songData && reavealed ? GetArtists(songData.artists) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info_box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer\",\n          children: [\"Time Left: \", `${timeLeft} `]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"instructions\",\n          children: songPlaying ? \"Listen\" : \"Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: currentPlayer1 && isGameLive.current ? \"current_player\" : \"\",\n          className: \"score\",\n          children: p1Score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: !currentPlayer1 && isGameLive.current ? \"current_player\" : \"\",\n          className: \"score\",\n          children: p2Score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 17\n      }, this), reavealed || !isGameLive.current ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my_button\",\n        onClick: async () => {\n          console.log(songCorrect, artistCorrect);\n          updateScore();\n          setSongCorrect(false);\n          setArtistCorrect(false);\n          setCurrentPlayer1(!currentPlayer1);\n          skipped.current = false;\n          await set_volume(100);\n          setTimeLeft(THINK_TIME);\n          const result = await GetNextSongDataRandom();\n          if (result) {\n            setSongPlaying(true);\n            setSongData(result);\n            setReavealed(false);\n            isGameLive.current = true;\n\n            // need to jump this timer if we skip...\n            setTimeout(() => {\n              if (!skipped.current) {\n                pause();\n              }\n            }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n          }\n        },\n        children: isGameLive.current ? \"Next\" : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 21\n      }, this) : null, reavealed ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: songCorrect ? 'correct_button' : \"wrong_button\",\n          onClick: () => setSongCorrect(!songCorrect),\n          children: \"Song Correct?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: artistCorrect ? 'correct_button' : \"wrong_button\",\n          onClick: () => setArtistCorrect(!artistCorrect),\n          children: \"Artist Correct?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 25\n      }, this) : null, isGameLive.current && !reavealed ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my_button\",\n        onClick: async () => {\n          await pause();\n          setTimeLeft(0);\n          setSongPlaying(songPlaying); // manually trigger the effect\n          skipped.current = true;\n        },\n        children: \"Skip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 607,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"GInHenXhit5wuq371Rok7I+0vQ0=\");\n_c8 = Game;\nconst Main = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 751,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 750,\n    columnNumber: 5\n  }, this);\n};\n_c9 = Main;\nexport default Main;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"Get_available_devices\");\n$RefreshReg$(_c2, \"GetNextSongDataRandom\");\n$RefreshReg$(_c3, \"Skip\");\n$RefreshReg$(_c4, \"Shuffle\");\n$RefreshReg$(_c5, \"NextQuestion\");\n$RefreshReg$(_c6, \"GetArtists\");\n$RefreshReg$(_c7, \"GetUserPlaylists\");\n$RefreshReg$(_c8, \"Game\");\n$RefreshReg$(_c9, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","useRef","authorize","placeholder_playlist","jsxDEV","_jsxDEV","ANSWER_TIME","THINK_TIME","user_data","profile_data","profile","accessToken","Get_available_devices","response","fetch","headers","data","json","ok","Error","console","log","error","_c","set_volume","vol","method","pause","pause_response","play","play_response","blind_play","body","JSON","stringify","interval","setInterval","playerState","is_playing","clearInterval","GetNextSongDataRandom","_data$item","_data$item2","_data$item3","_data$item4","_data$item5","_data$item5$album","skip_response","data_response","max_start","item","duration_ms","random_pos","Math","floor","random","seek_response","artists","name","album","images","url","_c2","playPlaylist","playlistId","context_uri","Skip","_c3","Shuffle","_c4","NextQuestion","song_data","_c5","GetArtists","artist_list","className","children","map","artist","index","length","fileName","_jsxFileName","lineNumber","columnNumber","_c6","GetUserPlaylists","_c7","Game","_s","songData","setSongData","reavealed","setReavealed","timeLeft","setTimeLeft","songPlaying","setSongPlaying","isGameLive","skipped","songCorrect","setSongCorrect","artistCorrect","setArtistCorrect","p1Score","setP1Score","p2Score","setP2Score","currentPlayer1","setCurrentPlayer1","currentPlaylist","setCurrentPlaylist","playlistData","setPlaylistData","query","setQuery","spotifySearch","event","target","value","GetPlaylist","playlist_json","_playlist_json$images","_playlist_json$images2","handle_playlist_click","playlist_data","id","onClick","bind","src","updateScore","thisRound","thisRoundBonus","preProcesses","devices","fetchedPlData","current","prevTimeLeft","progress_ms","profileImage","displayName","items","cover","result","setTimeout","_c8","Main","_c9","$RefreshReg$"],"sources":["/Users/mattlaws/personal/Spotify-Song-Trivia/src/components/Main.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport {authorize} from \"../scripts.js\"\nimport \"./styles/Main.css\"\nimport placeholder_playlist from \"./images/placeholder_playlist.png\"\n\nconst ANSWER_TIME = 6000\nconst THINK_TIME = 6\n// TODO can change these with a (easy, medium, hard) setting\n// TODO allow fo playlist searching (get category playlist)\n\nconst user_data = await authorize();\n\nconst profile_data = user_data.profile;\nconst accessToken = user_data.accessToken;\n\n\nconst Get_available_devices = async () => {\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me/player/devices', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n        })\n    \n        const data = await response.json();\n\n\n        if (!response.ok) {\n          throw new Error('Failed to pause');\n          }\n        console.log(data)\n\n        return data;\n      } catch (error) {\n        console.log(\"Error: \", error)\n      }\n\n      return null\n}\n\nconst set_volume = async (vol) => {\n\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/volume?volume_percent=${vol}`, {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n        },\n\n\n        })\n\n        if (!response.ok) {\n            throw new Error('Failed to change volume');\n        }\n    } catch (error) {\n\n        console.error('Error:', error);\n    }\n\n}\n\nconst pause = async () => {\n    try {\n    const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n        },\n        });\n    \n        if (!pause_response.ok) {\n        throw new Error('Failed to pause');\n        }\n    } catch (error) {\n        console.error('Error:', error);\n        return null; // Return null or handle the error as needed\n    }\n}\n\nconst play = async () => {\n   \n    try { \n        const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n            method: 'PUT',\n                headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n                },\n        });\n    \n        if (!play_response.ok) {\n            throw new Error('Failed to play');\n        }\n    } catch (error) {\n        console.error(\"Error:\", error)\n    }\n}\n\nconst blind_play = async () => {\n    try {\n        // Start playing the song\n        await fetch(`https://api.spotify.com/v1/me/player/play`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                // Add your song URI or context here\n            }),\n        });\n\n        // Poll the player state to check for end of song\n        const interval = setInterval(async () => {\n            const response = await fetch('https://api.spotify.com/v1/me/player', {\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`,\n                },\n            });\n            const playerState = await response.json();\n            if (!playerState.is_playing) {\n                clearInterval(interval);\n                // Pause playback at the end of the song\n                await fetch('https://api.spotify.com/v1/me/player/pause', {\n                    method: 'PUT',\n                    headers: {\n                        'Authorization': `Bearer ${accessToken}`,\n                    },\n                });\n            }\n        }, 1000); // Check every second\n\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\n\nconst GetNextSongDataRandom = async () => {\n    try {\n\n        await set_volume(0);\n\n        const skip_response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n          },\n        });\n\n        \n    \n        if (!skip_response.ok) {\n          throw new Error('Failed to skip');\n        }\n    \n        \n\n        console.log('skipped');\n\n        const data_response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            }\n        });\n\n        if (!data_response.ok) {\n            throw new Error('Failed to fetch data');\n          }\n        \n        const data = await data_response.json();\n\n        const max_start = data?.item?.duration_ms - 30000;\n            \n        \n        const random_pos =  Math.floor(Math.random() * max_start);\n\n        const seek_response = await fetch(`https://api.spotify.com/v1/me/player/seek?position_ms=${random_pos}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n            },\n        });\n\n        if (!seek_response.ok) {\n            throw new Error('Failed to seek');\n        }\n\n\n        await set_volume(100)\n\n        return { \n            \"duration\": data?.item?.duration_ms,\n            \"artists\": data?.item?.artists,\n            \"name\": data?.item?.name,\n            \"cover\": data?.item?.album?.images[0].url\n        };\n\n\n    } catch (error) {\n        console.error('Error:', error);\n        return null; \n\n    }\n    \n};\n\n\nconst playPlaylist = async (playlistId) => {\n  // Get_available_devices()\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        context_uri: `spotify:playlist:${playlistId}`,\n        // context_uri: `spotify:track:4iV5W9uYEdYUVa79Axb7Rh`,\n\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to play playlist');\n    }\n\n    console.log('Playlist is now playing');\n    // Get_current_song_data()\n\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n\n\n// const GetPlaylist = (playlist_json) => {\n\n//     const handle_playlist_click = (playlist_id) => {\n\n//         set_volume(0)\n//         playPlaylist(playlist_id);\n\n//     }\n    \n//     return (\n//       <div>\n//         <img className='playlist_image' onClick={handle_playlist_click.bind(null, playlist_json.id)} src={playlist_json.images[0]?.url ?? placeholder_playlist}></img>\n//         <p className='playlist_name'>{playlist_json.name}</p>\n        \n//       </div>\n//     );\n// };\n\n\n// const PlaylistSelect = () => {\n//   const [data, setData] = useState(null);\n  \n//   useEffect(() => {\n//     fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n// headers: {\n//   'Authorization': `Bearer ${accessToken}`\n// }\n// })\n//       .then(response => response.json())\n//       .then(json => setData(json))\n//       .catch(error => console.error(error));\n//   }, []);\n  \n//   // data ? console.log(data.items[4]) : console.log(\"pending\")\n  \n\n  \n\n//   return (\n//     <div id=\"playlist_select\">\n\n//       {data ? data.items.map((item, index) => (\n//         <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n//       )) : 'Loading...'}\n\n//     </div>\n\n//   );\n// }\n\n// function Header() {\n//   // displayName: profile.display_name,\n//   // id: profile.id,\n//   // email: profile.email,\n//   // uri: profile.uri,\n//   // profileImage: profileImage\n//   return (\n//         <div id=\"head\">\n//             {/* <section id=\"profile\"> */}\n//             <h1 className=\"headerItem\" id=\"title\"> Spotify Song Trivia</h1>\n//             <img className=\"headerItem\"  id=\"profile_img\" src={profile_data.profileImage} />\n\n//             <h2 className=\"headerItem\"  id=\"username\"> {profile_data.displayName}</h2> \n//             {/* <ul> */}\n//                 {/* <li>User ID: <span id=\"id\"></span></li> */}\n//                 {/* <li>Email: {profile_data.email}</li> */}\n//             {/* </ul> */}\n//             {/* </section> */}\n\n//         </div>\n//   );\n// }\n\nconst Skip = async () => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n          },\n        });\n    \n        if (!response.ok) {\n          throw new Error('Failed to skip');\n        }\n    \n        console.log('skipped');\n\n      } catch (error) {\n        console.error('Error:', error);\n      }\n      \n}\n\nconst Shuffle = async () => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/shuffle?state=true`, {\n          method: 'PUT',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n          },\n        });\n    \n        if (!response.ok) {\n          throw new Error('Failed to shuffle');\n        }\n    \n        console.log('shuffling enabled');\n      } catch (error) {\n        console.error('Error:', error);\n      }\n}\n\nconst NextQuestion = async () => {\n    const song_data = await GetNextSongDataRandom();\n    // Get_available_devices()\n    return song_data;\n    // await Skip()\n\n    // Skip()\n\n\n    \n\n}\n\n// const Get_devices = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/devices`, {\n//           method: 'GET',\n//           headers: {\n//             'Authorization': `Bearer ${accessToken}`,\n//           },\n//         });\n    \n//         if (!response.ok) {\n//           throw new Error('Failed to get devices');\n//         }\n    \n//         console.log('shuffling enabled');\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n// }\n\n// const Correct = () => {\n\n// }\n\n\n\nconst GetArtists = (artist_list) => {\n    return (\n\n        // {data ? data.items.map((item, index) => (\n        //     <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n        //   )) : 'Loading...'}\n        <div className='artist_wrap'>\n            {artist_list.map((artist, index) => (\n                <div key={index} className='artist'>{artist.name}{index == artist_list.length - 1 ? \"\" : \",\"} </div>\n            ))}\n        </div>\n    )\n}\n\n// const GetUserPlaylists = () => {\n//     console.log(\"stupud\")\n// //     const [data, setData] = useState(null);\n  \n// //     useEffect(() => {\n// //       fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n// //   headers: {\n// //     'Authorization': `Bearer ${accessToken}`\n// //   }\n// //   })\n// //         .then(response => response.json())\n// //         .then(json => setData(json))\n// //         .catch(error => console.error(error));\n// //     }, []);\n// //     return data\n// }\n\nconst GetUserPlaylists = async () => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/playlists?limit=50&offset=0`, {\n        headers: {\n            'Authorization': `Bearer ${accessToken}`\n            }\n        });\n        const data = await response.json();\n        // console.log(data); // This will log the data to the console\n    \n        if (!response.ok) {\n            throw new Error('Failed to get user playlists');\n        }\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        return null;\n    }\n}\n\n// const spotifySearch = (query) => {\n//     console.log(query);\n// }\n\nconst Game = () => {\n    const [songData, setSongData] = useState(null);\n    const [reavealed, setReavealed] = useState(false);\n    const [timeLeft, setTimeLeft] = useState(0);\n    const [songPlaying, setSongPlaying] = useState(false);\n    const isGameLive = useRef(false);\n    const skipped = useRef(false);\n    const [songCorrect, setSongCorrect] = useState(false);\n    const [artistCorrect, setArtistCorrect] = useState(false);\n    const [p1Score, setP1Score] = useState(0);\n    const [p2Score, setP2Score] = useState(0);\n    const [currentPlayer1, setCurrentPlayer1] = useState(false);\n    const [currentPlaylist, setCurrentPlaylist] = useState(null);\n    const [playlistData, setPlaylistData] = useState(null);\n    // const playlistData = GetUserPlaylists();\n    const [query, setQuery] = useState(\"Search Here...\");\n\n    const spotifySearch = async (event) => {\n        setQuery(event.target.value);\n        // console.log(query)\n        // const response = await fetch(`https://api.spotify.com/v1/search?q=${query}&type=track,album,artist,playlist`, {\n        //     headers: {\n        //         'Authorization': `Bearer ${accessToken}`\n        //     }\n        // });\n        // const data = await response.json();\n\n        // console.log(data)\n\n    };\n\n    // const GetUserPlaylists = () => {\n    //     const [data, setData] = useState(null);\n    //     useEffect(() => {\n    //         if (!playlistData) {\n                \n    //             fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n    //                 headers: {\n    //                     'Authorization': `Bearer ${accessToken}`\n    //                 }\n    //             })\n    //             .then(response => response.json())\n    //             .then(json => setData(json))\n    //             .catch(error => console.error(error));\n    //         }\n\n    //     }, []);\n    //     setPlaylistData(data)\n    // }\n\n\n    const GetPlaylist = (playlist_json) => {\n        \n\n        const handle_playlist_click = async (playlist_data) => {\n    \n            await set_volume(0);\n            await playPlaylist(playlist_data.id);\n            setCurrentPlaylist(playlist_data);\n    \n        }\n        \n        return (\n          <div>\n            <img className='playlist_image' onClick={handle_playlist_click.bind(null, playlist_json)} src={playlist_json.images[0]?.url ?? placeholder_playlist}></img>\n            <p className='playlist_name'>{playlist_json.name}</p>\n            \n          </div>\n        );\n    };\n\n    const updateScore = () => {\n        const thisRound = (songCorrect ? 10 : 0) +  (artistCorrect ? 10 : 0)\n        const thisRoundBonus = thisRound === 20 ? 5 : 0\n        if (currentPlayer1) {\n            setP1Score(p1Score + thisRound + thisRoundBonus)\n            \n        } else {\n            setP2Score(p2Score + thisRound + thisRoundBonus)\n\n        }\n        // console.log(p1Score, p2Score)\n\n    }\n\n\n    useEffect(() => {\n        const preProcesses = async () => {\n            const devices = await Get_available_devices();\n            console.log(devices);\n            await pause()\n            await set_volume(100);\n            await Shuffle();\n            const fetchedPlData = await GetUserPlaylists();\n            setPlaylistData(fetchedPlData)\n\n        };\n    \n        preProcesses();\n    }, []); // preloader\n    \n    useEffect(() => {\n        if (!isGameLive.current) {\n            console.log(\"hello\")\n            return;\n        }\n\n        const interval = setInterval(() => {\n            setTimeLeft(prevTimeLeft => {\n                if (prevTimeLeft === 0) {\n                    clearInterval(interval);\n\n                    if (songPlaying) {\n                        setTimeLeft(THINK_TIME);\n                        setSongPlaying(false);\n                    } else {\n                        setReavealed(true)\n                        blind_play();\n                    }\n                    \n                    return 0;\n                }\n                return prevTimeLeft - 1;\n            });\n        }, 1000);\n\n        // Clean up the interval to avoid memory leaks\n        return () => clearInterval(interval);\n    }, [songData, songPlaying]); // countdown\n\n\n    useEffect(() => {\n\n        const interval = setInterval(async () => {\n            try {\n                const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`\n                    }\n                });\n                const data = await response.json();\n                console.log(data); // This will log the data to the console\n\n                if (data.progress_ms + 20000 > data.item.duration_ms) {\n                    console.log(\"pausing playback to stop overflow\")\n                    pause();\n                }\n            \n                if (!response.ok) {\n                    throw new Error('Failed cron fetch');\n                }\n                \n            } catch (error) {\n                console.error('Error:', error);\n            }\n\n        }, 15000);\n        \n        return () => clearInterval(interval);\n    }, []); // check no song overflow\n\n    return (\n        <div>\n            {/* HEADER */}\n            <div id=\"head\">\n                {/* <section id=\"profile\"> */}\n                <h1 className=\"headerItem\" id=\"title\"> Spotify Song Trivia</h1>\n                <img className=\"headerItem\"  id=\"profile_img\" src={profile_data.profileImage} />\n\n                <h2 className=\"headerItem\"  id=\"username\"> {profile_data.displayName}</h2> \n                {/* <ul> */}\n                    {/* <li>User ID: <span id=\"id\"></span></li> */}\n                    {/* <li>Email: {profile_data.email}</li> */}\n                {/* </ul> */}\n                {/* </section> */}\n\n            </div>\n\n            {/* PLAYLIST */}\n            \n            {!currentPlaylist ?\n                <div id=\"playlist_select\">\n                    <div className='playlist_box_label'>User Playlists:</div>\n                    <div id=\"playlist_select_box\">\n\n                        \n\n                        {playlistData ? playlistData.items.map((item, index) => (\n                        <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n                        )) : 'Loading...'}\n\n                    </div> \n\n                    {/* <input className=\"searchbar\" type=\"text\" value={query} onChange={spotifySearch} />\n                    <div className=\"playlist_box_label\">{query}</div> */}\n\n                </div>\n                :\n\n                <div className='game_main'> \n                <div className='currentPlaylist'>\n                    {/* <div className='my_button' id='playlist_info'>Select new playlist</div> */}\n                    <img onClick={() => setCurrentPlaylist(null)}className='playlist_image' src={currentPlaylist ? currentPlaylist.images[0].url : placeholder_playlist}></img>\n                    <div id='playlist_info'>{currentPlaylist.name}</div>\n\n                </div>\n                <img className='track_image' src={songData && reavealed ? songData.cover : placeholder_playlist}></img>\n                <div className=\"answer_track\">Song: {songData && reavealed ? songData.name : \"\"}</div>\n                <div className=\"answer_artists\">Artist: {songData && reavealed ? GetArtists(songData.artists) : \"\"}</div>\n\n                <div className='info_box'>\n                    <div className=\"timer\">Time Left: {`${timeLeft} `}</div>\n                    <div className=\"instructions\">{songPlaying ? \"Listen\" : \"Answer\"}</div>\n\n                </div>\n\n                <div>\n                    <div id={(currentPlayer1 && isGameLive.current) ? \"current_player\" : \"\"} className='score'>{p1Score}</div>\n                    <div id={(!currentPlayer1 && isGameLive.current) ? \"current_player\" : \"\"} className='score'>{p2Score}</div>\n                </div>\n\n\n                {/* GAME */}\n                {\n                    reavealed || !isGameLive.current ? \n                    <div className=\"my_button\" onClick={\n                        async () => {\n                            console.log(songCorrect, artistCorrect)\n                            updateScore()\n                            setSongCorrect(false);\n                            setArtistCorrect(false);\n                            setCurrentPlayer1(!currentPlayer1)\n                            skipped.current = false\n                            await set_volume(100)\n                            setTimeLeft(THINK_TIME)\n                            const result = await GetNextSongDataRandom()\n                            if (result) {\n                                \n                                setSongPlaying(true)\n                                setSongData(result); \n                                setReavealed(false);\n                                isGameLive.current = true;\n                                \n                                // need to jump this timer if we skip...\n                                setTimeout(() => {\n                                    if (!skipped.current) {\n                                        pause();\n\n                                    }\n                                }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n                            }\n                        }\n                    \n                    }>{isGameLive.current ? \"Next\" : \"Start\"}</div> : null\n                }\n\n                {\n                    reavealed ? \n                        <div>\n                            <div className={songCorrect ? 'correct_button' : \"wrong_button\"}\n                            onClick={\n                                () => setSongCorrect(!songCorrect)\n                            }\n                            >Song Correct?</div>\n                            <div className={artistCorrect ? 'correct_button' : \"wrong_button\"}\n                            onClick={\n                                () => setArtistCorrect(!artistCorrect)\n                            }\n                            >Artist Correct?</div>\n                        </div> : null\n                }\n\n                {isGameLive.current && !reavealed ? \n                    <div className='my_button'\n                        onClick={\n                            async () => {\n                                await pause()\n                                setTimeLeft(0)\n                                setSongPlaying(songPlaying) // manually trigger the effect\n                                skipped.current = true;\n                            }\n                        }\n                    \n                    >Skip</div>\n                    : null}\n\n            </div>\n                \n            }\n\n            \n\n\n\n            \n            \n        </div>\n    )\n}\n\n\nconst Main = () => {\n\n\n  return (\n    <div>\n      <Game />\n\n\n    </div>\n  )\n  }\n\n\n\n\n\nexport default Main;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}