{"ast":null,"code":"var _jsxFileName = \"/Users/mattlaws/personal/Spotify-Song-Trivia/src/components/Main.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { authorize } from \"../scripts.js\";\nimport \"./styles/Main.css\";\nimport placeholder_playlist from \"./images/placeholder_playlist.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANSWER_TIME = 6000;\nconst THINK_TIME = 6;\n// TODO can change these with a (easy, medium, hard) setting\n// TODO allow fo playlist searching (get category playlist)\n\nconst user_data = await authorize();\nconst profile_data = user_data.profile;\nconst accessToken = user_data.accessToken;\nconst Get_available_devices = async () => {\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me/player/devices', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error('Failed to pause');\n    }\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n  return null;\n};\n_c = Get_available_devices;\nconst set_volume = async vol => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/volume?volume_percent=${vol}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to change volume');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst pause = async () => {\n  try {\n    const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!pause_response.ok) {\n      throw new Error('Failed to pause');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n    return null; // Return null or handle the error as needed\n  }\n};\nconst play = async () => {\n  try {\n    const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!play_response.ok) {\n      throw new Error('Failed to play');\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\nconst blind_play = async () => {\n  try {\n    // Start playing the song\n    await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        // Add your song URI or context here\n      })\n    });\n\n    // Poll the player state to check for end of song\n    const interval = setInterval(async () => {\n      const response = await fetch('https://api.spotify.com/v1/me/player', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      const playerState = await response.json();\n      if (!playerState.is_playing) {\n        clearInterval(interval);\n        // Pause playback at the end of the song\n        await fetch('https://api.spotify.com/v1/me/player/pause', {\n          method: 'PUT',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`\n          }\n        });\n      }\n    }, 1000); // Check every second\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst GetNextSongDataRandom = async () => {\n  try {\n    // const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n    //     method: 'PUT',\n    //     headers: {\n    //       'Authorization': `Bearer ${accessToken}`,\n    //     },\n    //   });\n\n    //   if (!pause_response.ok) {\n    //     throw new Error('Failed to pause');\n    //   }\n\n    await set_volume(0);\n    const skip_response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!skip_response.ok) {\n      throw new Error('Failed to skip');\n    }\n    console.log('skipped');\n    try {\n      var _data$item, _data$item2, _data$item3, _data$item4, _data$item5, _data$item5$album;\n      const data_response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      const data = await data_response.json();\n      const max_start = (data === null || data === void 0 ? void 0 : (_data$item = data.item) === null || _data$item === void 0 ? void 0 : _data$item.duration_ms) - 30000;\n\n      // seek random position\n      const random_pos = Math.floor(Math.random() * max_start);\n      const seek_response = await fetch(`https://api.spotify.com/v1/me/player/seek?position_ms=${random_pos}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!seek_response.ok) {\n        throw new Error('Failed to seek');\n      }\n\n      // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n      // Usage: wait for 5 seconds\n      // await delay(1000);\n\n      set_volume(100);\n\n      // const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      //     method: 'PUT',\n      //     headers: {\n      //       'Authorization': `Bearer ${accessToken}`,\n      //       'Content-Type': 'application/json',\n      //     },\n      //     // body: JSON.stringify({\n      //     //     \"position_ms\": `${random_pos}`\n\n      //     // }),\n      //   });\n\n      //   if (!play_response.ok) {\n      //     throw new Error('Failed to play');\n      //   }\n      // Return the current song data\n\n      // setTimeout(() => {\n      //     // This code will execute after 10 seconds\n      //     pause();\n      // }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n\n      return {\n        \"duration\": data === null || data === void 0 ? void 0 : (_data$item2 = data.item) === null || _data$item2 === void 0 ? void 0 : _data$item2.duration_ms,\n        \"artists\": data === null || data === void 0 ? void 0 : (_data$item3 = data.item) === null || _data$item3 === void 0 ? void 0 : _data$item3.artists,\n        \"name\": data === null || data === void 0 ? void 0 : (_data$item4 = data.item) === null || _data$item4 === void 0 ? void 0 : _data$item4.name,\n        \"cover\": data === null || data === void 0 ? void 0 : (_data$item5 = data.item) === null || _data$item5 === void 0 ? void 0 : (_data$item5$album = _data$item5.album) === null || _data$item5$album === void 0 ? void 0 : _data$item5$album.images[0].url\n      };\n    } catch (error) {\n      console.error('Error:', error);\n      return null; // Return null or handle the error as needed\n    }\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n_c2 = GetNextSongDataRandom;\nconst playPlaylist = async playlistId => {\n  // Get_available_devices()\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        context_uri: `spotify:playlist:${playlistId}`\n        // context_uri: `spotify:track:4iV5W9uYEdYUVa79Axb7Rh`,\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to play playlist');\n    }\n    console.log('Playlist is now playing');\n    // Get_current_song_data()\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst GetPlaylist = playlist_json => {\n  var _playlist_json$images, _playlist_json$images2;\n  // Assuming accessToken is the access token\n  // const [data, setData] = useState(null);\n\n  // useEffect(() => {\n  // const playlistId = 'PLAYLIST_ID'; // Replace PLAYLIST_ID with the ID of your playlist\n\n  // console.log(data)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"playlist_image\",\n      onClick: handle_playlist_click.bind(null, playlist_json.id),\n      src: (_playlist_json$images = (_playlist_json$images2 = playlist_json.images[0]) === null || _playlist_json$images2 === void 0 ? void 0 : _playlist_json$images2.url) !== null && _playlist_json$images !== void 0 ? _playlist_json$images : placeholder_playlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"playlist_name\",\n      children: playlist_json.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 7\n  }, this);\n};\n\n// const PlaylistSelect = () => {\n//   const [data, setData] = useState(null);\n\n//   useEffect(() => {\n//     fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n// headers: {\n//   'Authorization': `Bearer ${accessToken}`\n// }\n// })\n//       .then(response => response.json())\n//       .then(json => setData(json))\n//       .catch(error => console.error(error));\n//   }, []);\n\n//   // data ? console.log(data.items[4]) : console.log(\"pending\")\n\n//   return (\n//     <div id=\"playlist_select\">\n\n//       {data ? data.items.map((item, index) => (\n//         <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n//       )) : 'Loading...'}\n\n//     </div>\n\n//   );\n// }\n\n// function Header() {\n//   // displayName: profile.display_name,\n//   // id: profile.id,\n//   // email: profile.email,\n//   // uri: profile.uri,\n//   // profileImage: profileImage\n//   return (\n//         <div id=\"head\">\n//             {/* <section id=\"profile\"> */}\n//             <h1 className=\"headerItem\" id=\"title\"> Spotify Song Trivia</h1>\n//             <img className=\"headerItem\"  id=\"profile_img\" src={profile_data.profileImage} />\n\n//             <h2 className=\"headerItem\"  id=\"username\"> {profile_data.displayName}</h2> \n//             {/* <ul> */}\n//                 {/* <li>User ID: <span id=\"id\"></span></li> */}\n//                 {/* <li>Email: {profile_data.email}</li> */}\n//             {/* </ul> */}\n//             {/* </section> */}\n\n//         </div>\n//   );\n// }\n_c3 = GetPlaylist;\nconst Skip = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to skip');\n    }\n    console.log('skipped');\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n_c4 = Skip;\nconst Shuffle = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/shuffle?state=true`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to shuffle');\n    }\n    console.log('shuffling enabled');\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n_c5 = Shuffle;\nconst NextQuestion = async () => {\n  const song_data = await GetNextSongDataRandom();\n  // Get_available_devices()\n  return song_data;\n  // await Skip()\n\n  // Skip()\n};\n\n// const Get_devices = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/devices`, {\n//           method: 'GET',\n//           headers: {\n//             'Authorization': `Bearer ${accessToken}`,\n//           },\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to get devices');\n//         }\n\n//         console.log('shuffling enabled');\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n// }\n\n// const Correct = () => {\n\n// }\n_c6 = NextQuestion;\nconst GetUserPlaylists = () => {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(json => setData(json)).catch(error => console.error(error));\n  }, []);\n  return data;\n};\n_s(GetUserPlaylists, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c7 = GetUserPlaylists;\nconst GetArtists = artist_list => {\n  return (\n    /*#__PURE__*/\n    // {data ? data.items.map((item, index) => (\n    //     <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n    //   )) : 'Loading...'}\n    _jsxDEV(\"div\", {\n      className: \"artist_wrap\",\n      children: artist_list.map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"artist\",\n        children: [artist.name, index == artist_list.length - 1 ? \"\" : \",\", \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 9\n    }, this)\n  );\n};\n_c8 = GetArtists;\nconst Game = () => {\n  _s2();\n  const [songData, setSongData] = useState(null);\n  const [reavealed, setReavealed] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [songPlaying, setSongPlaying] = useState(false);\n  const isGameLive = useRef(false);\n  const skipped = useRef(false);\n  const [songCorrect, setSongCorrect] = useState(false);\n  const [artistCorrect, setArtistCorrect] = useState(false);\n  const [p1Score, setP1Score] = useState(0);\n  const [p2Score, setP2Score] = useState(0);\n  const [currentPlayer1, setCurrentPlayer1] = useState(false);\n  const [currentPlaylist, setCurrentPlaylist] = useState(null);\n  const playlistData = GetUserPlaylists();\n  const updateScore = () => {\n    const thisRound = (songCorrect ? 10 : 0) + (artistCorrect ? 10 : 0);\n    const thisRoundBonus = thisRound === 20 ? 5 : 0;\n    if (currentPlayer1) {\n      setP1Score(p1Score + thisRound + thisRoundBonus);\n    } else {\n      setP2Score(p2Score + thisRound + thisRoundBonus);\n    }\n    // console.log(p1Score, p2Score)\n  };\n  useEffect(() => {\n    const preProcesses = async () => {\n      const devices = await Get_available_devices();\n      console.log(devices);\n      set_volume(100);\n      Shuffle();\n    };\n    preProcesses();\n  }, []); // preloader\n\n  useEffect(() => {\n    if (!isGameLive.current) {\n      console.log(\"hello\");\n      return;\n    }\n    const interval = setInterval(() => {\n      setTimeLeft(prevTimeLeft => {\n        if (prevTimeLeft === 0) {\n          clearInterval(interval);\n          if (songPlaying) {\n            setTimeLeft(THINK_TIME);\n            setSongPlaying(false);\n          } else {\n            setReavealed(true);\n            blind_play();\n          }\n          return 0;\n        }\n        return prevTimeLeft - 1;\n      });\n    }, 1000);\n\n    // Clean up the interval to avoid memory leaks\n    return () => clearInterval(interval);\n  }, [songData, songPlaying]); // countdown\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`\n          }\n        });\n        const data = await response.json();\n        console.log(data); // This will log the data to the console\n\n        if (data.progress_ms + 20000 > data.item.duration_ms) {\n          console.log(\"pausing playback to stop overflow\");\n          pause();\n        }\n        if (!response.ok) {\n          throw new Error('Failed cron fetch');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }, 15000);\n    return () => clearInterval(interval);\n  }, []); // check no song overflow\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"head\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"headerItem\",\n        id: \"title\",\n        children: \" Spotify Song Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"headerItem\",\n        id: \"profile_img\",\n        src: profile_data.profileImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"headerItem\",\n        id: \"username\",\n        children: [\" \", profile_data.displayName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"playlist_select\",\n      children: playlistData ? playlistData.items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist\",\n        children: GetPlaylist(item)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 17\n      }, this)) : 'Loading...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 13\n    }, this), reavealed || !isGameLive.current ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my_button\",\n      onClick: async () => {\n        console.log(songCorrect, artistCorrect);\n        updateScore();\n        setSongCorrect(false);\n        setArtistCorrect(false);\n        setCurrentPlayer1(!currentPlayer1);\n        skipped.current = false;\n        await set_volume(100);\n        setTimeLeft(THINK_TIME);\n        const result = await NextQuestion();\n        setSongPlaying(true);\n        setSongData(result);\n        setReavealed(false);\n        isGameLive.current = true;\n\n        // need to jump this timer if we skip...\n        setTimeout(() => {\n          if (!skipped.current) {\n            pause();\n          }\n        }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n      },\n      children: isGameLive.current ? \"Next\" : \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 17\n    }, this) : null, reavealed ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: songCorrect ? 'correct_button' : \"wrong_button\",\n        onClick: () => setSongCorrect(!songCorrect),\n        children: \"Song Correct?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: artistCorrect ? 'correct_button' : \"wrong_button\",\n        onClick: () => setArtistCorrect(!artistCorrect),\n        children: \"Artist Correct?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 21\n    }, this) : null, isGameLive.current && !reavealed ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my_button\",\n      onClick: async () => {\n        await pause();\n        setTimeLeft(0);\n        setSongPlaying(songPlaying);\n        skipped.current = true;\n      },\n      children: \"Skip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 17\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"track_image\",\n      src: songData && reavealed ? songData.cover : placeholder_playlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer_track\",\n      children: [\"Song: \", songData && reavealed ? songData.name : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer_artists\",\n      children: [\"Artist: \", songData && reavealed ? GetArtists(songData.artists) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info_box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: [\"Time Left: \", `${timeLeft} `]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"instructions\",\n        children: songPlaying ? \"Listen\" : \"Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: p1Score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: p2Score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 559,\n    columnNumber: 9\n  }, this);\n};\n\n// const PlayPlaylistButton = (playlistId) => {\n//   const playPlaylist = async () => {\n//     try {\n//       const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${accessToken}`,\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           context_uri: `spotify:playlist:${playlistId}`,\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to play playlist');\n//       }\n\n//       console.log('Playlist is now playing');\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <button onClick={playPlaylist}>\n//       Play Playlist\n//     </button>\n//   );\n// };\n_s2(Game, \"P7bFovOjzz1T4rsgm+bvZgFKOOU=\");\n_c9 = Game;\nconst Main = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 728,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 725,\n    columnNumber: 5\n  }, this);\n};\n_c10 = Main;\nexport default Main;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"Get_available_devices\");\n$RefreshReg$(_c2, \"GetNextSongDataRandom\");\n$RefreshReg$(_c3, \"GetPlaylist\");\n$RefreshReg$(_c4, \"Skip\");\n$RefreshReg$(_c5, \"Shuffle\");\n$RefreshReg$(_c6, \"NextQuestion\");\n$RefreshReg$(_c7, \"GetUserPlaylists\");\n$RefreshReg$(_c8, \"GetArtists\");\n$RefreshReg$(_c9, \"Game\");\n$RefreshReg$(_c10, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","useRef","authorize","placeholder_playlist","jsxDEV","_jsxDEV","ANSWER_TIME","THINK_TIME","user_data","profile_data","profile","accessToken","Get_available_devices","response","fetch","headers","data","json","ok","Error","console","log","error","_c","set_volume","vol","method","pause","pause_response","play","play_response","blind_play","body","JSON","stringify","interval","setInterval","playerState","is_playing","clearInterval","GetNextSongDataRandom","skip_response","_data$item","_data$item2","_data$item3","_data$item4","_data$item5","_data$item5$album","data_response","max_start","item","duration_ms","random_pos","Math","floor","random","seek_response","artists","name","album","images","url","_c2","playPlaylist","playlistId","context_uri","GetPlaylist","playlist_json","_playlist_json$images","_playlist_json$images2","children","className","onClick","handle_playlist_click","bind","id","src","fileName","_jsxFileName","lineNumber","columnNumber","_c3","Skip","_c4","Shuffle","_c5","NextQuestion","song_data","_c6","GetUserPlaylists","_s","setData","then","catch","_c7","GetArtists","artist_list","map","artist","index","length","_c8","Game","_s2","songData","setSongData","reavealed","setReavealed","timeLeft","setTimeLeft","songPlaying","setSongPlaying","isGameLive","skipped","songCorrect","setSongCorrect","artistCorrect","setArtistCorrect","p1Score","setP1Score","p2Score","setP2Score","currentPlayer1","setCurrentPlayer1","currentPlaylist","setCurrentPlaylist","playlistData","updateScore","thisRound","thisRoundBonus","preProcesses","devices","current","prevTimeLeft","progress_ms","profileImage","displayName","items","result","setTimeout","cover","_c9","Main","_c10","$RefreshReg$"],"sources":["/Users/mattlaws/personal/Spotify-Song-Trivia/src/components/Main.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport {authorize} from \"../scripts.js\"\nimport \"./styles/Main.css\"\nimport placeholder_playlist from \"./images/placeholder_playlist.png\"\n\nconst ANSWER_TIME = 6000\nconst THINK_TIME = 6\n// TODO can change these with a (easy, medium, hard) setting\n// TODO allow fo playlist searching (get category playlist)\n\nconst user_data = await authorize();\n\nconst profile_data = user_data.profile;\nconst accessToken = user_data.accessToken;\n\n\nconst Get_available_devices = async () => {\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me/player/devices', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n        })\n    \n        const data = await response.json();\n\n\n        if (!response.ok) {\n          throw new Error('Failed to pause');\n          }\n        console.log(data)\n\n        return data;\n      } catch (error) {\n        console.log(\"Error: \", error)\n      }\n\n      return null\n}\n\nconst set_volume = async (vol) => {\n\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/volume?volume_percent=${vol}`, {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n        },\n\n\n        })\n\n        if (!response.ok) {\n            throw new Error('Failed to change volume');\n        }\n    } catch (error) {\n\n        console.error('Error:', error);\n    }\n\n}\n\nconst pause = async () => {\n    try {\n    const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n        },\n        });\n    \n        if (!pause_response.ok) {\n        throw new Error('Failed to pause');\n        }\n    } catch (error) {\n        console.error('Error:', error);\n        return null; // Return null or handle the error as needed\n    }\n}\n\nconst play = async () => {\n   \n    try { \n        const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n            method: 'PUT',\n                headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n                },\n        });\n    \n        if (!play_response.ok) {\n            throw new Error('Failed to play');\n        }\n    } catch (error) {\n        console.error(\"Error:\", error)\n    }\n}\n\nconst blind_play = async () => {\n    try {\n        // Start playing the song\n        await fetch(`https://api.spotify.com/v1/me/player/play`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                // Add your song URI or context here\n            }),\n        });\n\n        // Poll the player state to check for end of song\n        const interval = setInterval(async () => {\n            const response = await fetch('https://api.spotify.com/v1/me/player', {\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`,\n                },\n            });\n            const playerState = await response.json();\n            if (!playerState.is_playing) {\n                clearInterval(interval);\n                // Pause playback at the end of the song\n                await fetch('https://api.spotify.com/v1/me/player/pause', {\n                    method: 'PUT',\n                    headers: {\n                        'Authorization': `Bearer ${accessToken}`,\n                    },\n                });\n            }\n        }, 1000); // Check every second\n\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\n\nconst GetNextSongDataRandom = async () => {\n    try {\n        \n\n        // const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n        //     method: 'PUT',\n        //     headers: {\n        //       'Authorization': `Bearer ${accessToken}`,\n        //     },\n        //   });\n      \n        //   if (!pause_response.ok) {\n        //     throw new Error('Failed to pause');\n        //   }\n\n\n        await set_volume(0);\n\n        const skip_response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n          },\n        });\n\n        \n    \n        if (!skip_response.ok) {\n          throw new Error('Failed to skip');\n        }\n    \n        \n\n        console.log('skipped');\n        try {\n            const data_response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`\n                }\n            });\n            const data = await data_response.json();\n\n            const max_start = data?.item?.duration_ms - 30000;\n            \n            // seek random position\n            const random_pos =  Math.floor(Math.random() * max_start);\n            const seek_response = await fetch(`https://api.spotify.com/v1/me/player/seek?position_ms=${random_pos}`, {\n                method: 'PUT',\n                headers: {\n                  'Authorization': `Bearer ${accessToken}`,\n                },\n              });\n\n              if (!seek_response.ok) {\n                throw new Error('Failed to seek');\n              }\n            \n            // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n              // Usage: wait for 5 seconds\n            // await delay(1000);\n\n            set_volume(100)\n\n            // const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n            //     method: 'PUT',\n            //     headers: {\n            //       'Authorization': `Bearer ${accessToken}`,\n            //       'Content-Type': 'application/json',\n            //     },\n            //     // body: JSON.stringify({\n            //     //     \"position_ms\": `${random_pos}`\n            \n            //     // }),\n            //   });\n          \n            //   if (!play_response.ok) {\n            //     throw new Error('Failed to play');\n            //   }\n            // Return the current song data\n            \n            // setTimeout(() => {\n            //     // This code will execute after 10 seconds\n            //     pause();\n            // }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n\n            return { \n                \"duration\": data?.item?.duration_ms,\n                \"artists\": data?.item?.artists,\n                \"name\": data?.item?.name,\n                \"cover\": data?.item?.album?.images[0].url\n            };\n        } catch (error) {\n            console.error('Error:', error);\n            return null; // Return null or handle the error as needed\n        }\n\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    \n};\n\n\nconst playPlaylist = async (playlistId) => {\n  // Get_available_devices()\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        context_uri: `spotify:playlist:${playlistId}`,\n        // context_uri: `spotify:track:4iV5W9uYEdYUVa79Axb7Rh`,\n\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to play playlist');\n    }\n\n    console.log('Playlist is now playing');\n    // Get_current_song_data()\n\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n\n\nconst GetPlaylist = (playlist_json) => {\n\n\n  // Assuming accessToken is the access token\n// const [data, setData] = useState(null);\n  \n// useEffect(() => {\n// const playlistId = 'PLAYLIST_ID'; // Replace PLAYLIST_ID with the ID of your playlist\n\n\n  // console.log(data)\n\n    \n    return (\n      <div>\n        <img className='playlist_image' onClick={handle_playlist_click.bind(null, playlist_json.id)} src={playlist_json.images[0]?.url ?? placeholder_playlist}></img>\n        <p className='playlist_name'>{playlist_json.name}</p>\n        \n      </div>\n    );\n  };\n\n\n// const PlaylistSelect = () => {\n//   const [data, setData] = useState(null);\n  \n//   useEffect(() => {\n//     fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n// headers: {\n//   'Authorization': `Bearer ${accessToken}`\n// }\n// })\n//       .then(response => response.json())\n//       .then(json => setData(json))\n//       .catch(error => console.error(error));\n//   }, []);\n  \n//   // data ? console.log(data.items[4]) : console.log(\"pending\")\n  \n\n  \n\n//   return (\n//     <div id=\"playlist_select\">\n\n//       {data ? data.items.map((item, index) => (\n//         <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n//       )) : 'Loading...'}\n\n//     </div>\n\n//   );\n// }\n\n// function Header() {\n//   // displayName: profile.display_name,\n//   // id: profile.id,\n//   // email: profile.email,\n//   // uri: profile.uri,\n//   // profileImage: profileImage\n//   return (\n//         <div id=\"head\">\n//             {/* <section id=\"profile\"> */}\n//             <h1 className=\"headerItem\" id=\"title\"> Spotify Song Trivia</h1>\n//             <img className=\"headerItem\"  id=\"profile_img\" src={profile_data.profileImage} />\n\n//             <h2 className=\"headerItem\"  id=\"username\"> {profile_data.displayName}</h2> \n//             {/* <ul> */}\n//                 {/* <li>User ID: <span id=\"id\"></span></li> */}\n//                 {/* <li>Email: {profile_data.email}</li> */}\n//             {/* </ul> */}\n//             {/* </section> */}\n\n//         </div>\n//   );\n// }\n\nconst Skip = async () => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n          },\n        });\n    \n        if (!response.ok) {\n          throw new Error('Failed to skip');\n        }\n    \n        console.log('skipped');\n\n      } catch (error) {\n        console.error('Error:', error);\n      }\n      \n}\n\nconst Shuffle = async () => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/shuffle?state=true`, {\n          method: 'PUT',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n          },\n        });\n    \n        if (!response.ok) {\n          throw new Error('Failed to shuffle');\n        }\n    \n        console.log('shuffling enabled');\n      } catch (error) {\n        console.error('Error:', error);\n      }\n}\n\nconst NextQuestion = async () => {\n    const song_data = await GetNextSongDataRandom();\n    // Get_available_devices()\n    return song_data;\n    // await Skip()\n\n    // Skip()\n\n\n    \n\n}\n\n// const Get_devices = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/devices`, {\n//           method: 'GET',\n//           headers: {\n//             'Authorization': `Bearer ${accessToken}`,\n//           },\n//         });\n    \n//         if (!response.ok) {\n//           throw new Error('Failed to get devices');\n//         }\n    \n//         console.log('shuffling enabled');\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n// }\n\n// const Correct = () => {\n\n// }\n\n\nconst GetUserPlaylists = () => {\n    const [data, setData] = useState(null);\n  \n    useEffect(() => {\n      fetch('https://api.spotify.com/v1/me/playlists?limit=50&offset=0', {\n  headers: {\n    'Authorization': `Bearer ${accessToken}`\n  }\n  })\n        .then(response => response.json())\n        .then(json => setData(json))\n        .catch(error => console.error(error));\n    }, []);\n    return data\n}\nconst GetArtists = (artist_list) => {\n    return (\n\n        // {data ? data.items.map((item, index) => (\n        //     <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n        //   )) : 'Loading...'}\n        <div className='artist_wrap'>\n            {artist_list.map((artist, index) => (\n                <div key={index} className='artist'>{artist.name}{index == artist_list.length - 1 ? \"\" : \",\"} </div>\n            ))}\n        </div>\n    )\n}\n\nconst Game = () => {\n    const [songData, setSongData] = useState(null);\n    const [reavealed, setReavealed] = useState(false);\n    const [timeLeft, setTimeLeft] = useState(0);\n    const [songPlaying, setSongPlaying] = useState(false);\n    const isGameLive = useRef(false);\n    const skipped = useRef(false);\n    const [songCorrect, setSongCorrect] = useState(false);\n    const [artistCorrect, setArtistCorrect] = useState(false);\n    const [p1Score, setP1Score] = useState(0);\n    const [p2Score, setP2Score] = useState(0);\n    const [currentPlayer1, setCurrentPlayer1] = useState(false);\n    const [currentPlaylist, setCurrentPlaylist] = useState(null);\n\n    const playlistData = GetUserPlaylists()\n\n    const updateScore = () => {\n        const thisRound = (songCorrect ? 10 : 0) +  (artistCorrect ? 10 : 0)\n        const thisRoundBonus = thisRound === 20 ? 5 : 0\n        if (currentPlayer1) {\n            setP1Score(p1Score + thisRound + thisRoundBonus)\n            \n        } else {\n            setP2Score(p2Score + thisRound + thisRoundBonus)\n\n        }\n        // console.log(p1Score, p2Score)\n\n    }\n\n\n    useEffect(() => {\n        const preProcesses = async () => {\n            const devices = await Get_available_devices();\n            console.log(devices);\n            set_volume(100);\n            Shuffle();\n        };\n    \n        preProcesses();\n    }, []); // preloader\n    \n    useEffect(() => {\n        if (!isGameLive.current) {\n            console.log(\"hello\")\n            return;\n        }\n\n        const interval = setInterval(() => {\n            setTimeLeft(prevTimeLeft => {\n                if (prevTimeLeft === 0) {\n                    clearInterval(interval);\n\n                    if (songPlaying) {\n                        setTimeLeft(THINK_TIME);\n                        setSongPlaying(false);\n                    } else {\n                        setReavealed(true)\n                        blind_play();\n                    }\n                    \n                    return 0;\n                }\n                return prevTimeLeft - 1;\n            });\n        }, 1000);\n\n        // Clean up the interval to avoid memory leaks\n        return () => clearInterval(interval);\n    }, [songData, songPlaying]); // countdown\n\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            try {\n\n                const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`\n                    }\n                });\n                const data = await response.json();\n                console.log(data); // This will log the data to the console\n\n                if (data.progress_ms + 20000 > data.item.duration_ms) {\n                    console.log(\"pausing playback to stop overflow\")\n                    pause();\n                }\n            \n                if (!response.ok) {\n                    throw new Error('Failed cron fetch');\n                }\n                \n            } catch (error) {\n                console.error('Error:', error);\n            }\n\n        }, 15000);\n        \n        return () => clearInterval(interval);\n    }, []); // check no song overflow\n\n    return (\n        <div>\n            {/* HEADER */}\n            <div id=\"head\">\n                {/* <section id=\"profile\"> */}\n                <h1 className=\"headerItem\" id=\"title\"> Spotify Song Trivia</h1>\n                <img className=\"headerItem\"  id=\"profile_img\" src={profile_data.profileImage} />\n\n                <h2 className=\"headerItem\"  id=\"username\"> {profile_data.displayName}</h2> \n                {/* <ul> */}\n                    {/* <li>User ID: <span id=\"id\"></span></li> */}\n                    {/* <li>Email: {profile_data.email}</li> */}\n                {/* </ul> */}\n                {/* </section> */}\n\n            </div>\n\n            {/* PLAYLIST */}\n            <div id=\"playlist_select\">\n\n                {playlistData ? playlistData.items.map((item, index) => (\n                <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n                )) : 'Loading...'}\n\n            </div>\n            {/* GAME */}\n            {\n                reavealed || !isGameLive.current ? \n                <div className=\"my_button\" onClick={\n                    async () => {\n                        console.log(songCorrect, artistCorrect)\n                        updateScore()\n                        setSongCorrect(false);\n                        setArtistCorrect(false);\n                        setCurrentPlayer1(!currentPlayer1)\n                        skipped.current = false\n                        await set_volume(100)\n                        setTimeLeft(THINK_TIME)\n                        const result = await NextQuestion();\n                        setSongPlaying(true)\n\n\n                        \n                        \n                        setSongData(result); \n                \n                        setReavealed(false);\n                        isGameLive.current = true;\n                        \n                        // need to jump this timer if we skip...\n                        setTimeout(() => {\n                            if (!skipped.current) {\n                                pause();\n\n                            }\n                        }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n                    }\n                \n                }>{isGameLive.current ? \"Next\" : \"Start\"}</div> : null\n            }\n\n            {\n                reavealed ? \n                    <div>\n                        <div className={songCorrect ? 'correct_button' : \"wrong_button\"}\n                        onClick={\n                            () => setSongCorrect(!songCorrect)\n                        }\n                        >Song Correct?</div>\n                        <div className={artistCorrect ? 'correct_button' : \"wrong_button\"}\n                        onClick={\n                            () => setArtistCorrect(!artistCorrect)\n                        }\n                        >Artist Correct?</div>\n                    </div> : null\n            }\n\n            {isGameLive.current && !reavealed ? \n                <div className='my_button'\n                    onClick={\n                        async () => {\n                            await pause()\n                            setTimeLeft(0)\n                            setSongPlaying(songPlaying)\n                            skipped.current = true;\n                        }\n                    }\n                \n                >Skip</div>\n                : null}\n\n            {/* <button className=\"skip\" onClick={() => \n                setReavealed(true)\n            }>Correct</button>\n\n            <button className=\"skip\" onClick={() => \n                setReavealed(false)\n            }>Hide</button> */}\n            {/* <button className=\"skip\" onClick={() => \n                setReavealed(true)\n            }>Correct</button>\n\n            <button className=\"skip\" onClick={() => \n                setReavealed(false)\n            }>Hide</button> */}\n\n            <img className='track_image' src={songData && reavealed ? songData.cover : placeholder_playlist}></img>\n            <div className=\"answer_track\">Song: {songData && reavealed ? songData.name : \"\"}</div>\n            <div className=\"answer_artists\">Artist: {songData && reavealed ? GetArtists(songData.artists) : \"\"}</div>\n\n            <div className='info_box'>\n                <div className=\"timer\">Time Left: {`${timeLeft} `}</div>\n                <div className=\"instructions\">{songPlaying ? \"Listen\" : \"Answer\"}</div>\n\n            </div>\n\n            <div>\n                <div className='score'>{p1Score}</div>\n                <div className='score'>{p2Score}</div>\n\n            </div>\n\n\n\n            \n            \n        </div>\n    )\n}\n\n// const PlayPlaylistButton = (playlistId) => {\n//   const playPlaylist = async () => {\n//     try {\n//       const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${accessToken}`,\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           context_uri: `spotify:playlist:${playlistId}`,\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to play playlist');\n//       }\n\n//       console.log('Playlist is now playing');\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <button onClick={playPlaylist}>\n//       Play Playlist\n//     </button>\n//   );\n// };\n\n\n\nconst Main = () => {\n\n\n  return (\n    <div>\n      {/* <Header /> */}\n      {/* <PlaylistSelect /> */}\n      <Game />\n\n\n    </div>\n  )\n  }\n\n\n\n\n\nexport default Main;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}