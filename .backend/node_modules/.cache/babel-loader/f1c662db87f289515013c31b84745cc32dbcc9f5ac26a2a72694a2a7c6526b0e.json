{"ast":null,"code":"var _jsxFileName = \"/Users/mattlaws/personal/Spotify-Song-Trivia/src/components/Main.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { authorize } from \"../scripts.js\";\nimport \"./styles/Main.css\";\nimport placeholder_playlist from \"./images/placeholder_playlist.png\";\nimport { waitFor } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANSWER_TIME = 6000;\nconst THINK_TIME = 6;\n// TODO can change these with a (easy, medium, hard) setting\n// TODO allow fo playlist searching (get category playlist)\n\nconst user_data = await authorize();\nconst profile_data = user_data.profile;\nconst accessToken = user_data.accessToken;\nconst Get_available_devices = async () => {\n  try {\n    const response = await fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(\"Failed to pause\");\n    }\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n  return null;\n};\n_c = Get_available_devices;\nconst set_volume = async vol => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/volume?volume_percent=${vol}`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to change volume\");\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\nconst pause = async () => {\n  try {\n    const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    if (!pause_response.ok) {\n      throw new Error(\"Failed to pause\");\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return null; // Return null or handle the error as needed\n  }\n};\nconst play = async () => {\n  try {\n    const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!play_response.ok) {\n      throw new Error(\"Failed to play\");\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\nconst blind_play = async () => {\n  try {\n    // Start playing the song\n    await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        // Add your song URI or context here\n      })\n    });\n\n    // Poll the player state to check for end of song\n    const interval = setInterval(async () => {\n      const response = await fetch(\"https://api.spotify.com/v1/me/player\", {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      const playerState = await response.json();\n      if (!playerState.is_playing) {\n        clearInterval(interval);\n        // Pause playback at the end of the song\n        await fetch(\"https://api.spotify.com/v1/me/player/pause\", {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n      }\n    }, 1000); // Check every second\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\nconst GetNextSongDataRandom = async () => {\n  try {\n    // const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n    //     method: 'PUT',\n    //     headers: {\n    //       'Authorization': `Bearer ${accessToken}`,\n    //     },\n    //   });\n\n    //   if (!pause_response.ok) {\n    //     throw new Error('Failed to pause');\n    //   }\n\n    await set_volume(0);\n    const skip_response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    if (!skip_response.ok) {\n      throw new Error(\"Failed to skip\");\n    }\n    console.log(\"skipped\");\n    try {\n      var _data$item, _data$item2, _data$item3, _data$item4, _data$item5, _data$item5$album;\n      const data_response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      const data = await data_response.json();\n      const max_start = (data === null || data === void 0 ? void 0 : (_data$item = data.item) === null || _data$item === void 0 ? void 0 : _data$item.duration_ms) - 30000;\n\n      // seek random position\n      const random_pos = Math.floor(Math.random() * max_start);\n      const seek_response = await fetch(`https://api.spotify.com/v1/me/player/seek?position_ms=${random_pos}`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      if (!seek_response.ok) {\n        throw new Error(\"Failed to seek\");\n      }\n\n      // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n      // Usage: wait for 5 seconds\n      // await delay(1000);\n\n      set_volume(100);\n\n      // const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      //     method: 'PUT',\n      //     headers: {\n      //       'Authorization': `Bearer ${accessToken}`,\n      //       'Content-Type': 'application/json',\n      //     },\n      //     // body: JSON.stringify({\n      //     //     \"position_ms\": `${random_pos}`\n\n      //     // }),\n      //   });\n\n      //   if (!play_response.ok) {\n      //     throw new Error('Failed to play');\n      //   }\n      // Return the current song data\n\n      setTimeout(() => {\n        // This code will execute after 10 seconds\n        pause();\n      }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n\n      return {\n        duration: data === null || data === void 0 ? void 0 : (_data$item2 = data.item) === null || _data$item2 === void 0 ? void 0 : _data$item2.duration_ms,\n        artists: data === null || data === void 0 ? void 0 : (_data$item3 = data.item) === null || _data$item3 === void 0 ? void 0 : _data$item3.artists,\n        name: data === null || data === void 0 ? void 0 : (_data$item4 = data.item) === null || _data$item4 === void 0 ? void 0 : _data$item4.name,\n        cover: data === null || data === void 0 ? void 0 : (_data$item5 = data.item) === null || _data$item5 === void 0 ? void 0 : (_data$item5$album = _data$item5.album) === null || _data$item5$album === void 0 ? void 0 : _data$item5$album.images[0].url\n      };\n    } catch (error) {\n      console.error(\"Error:\", error);\n      return null; // Return null or handle the error as needed\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n_c2 = GetNextSongDataRandom;\nconst playPlaylist = async playlistId => {\n  // Get_available_devices()\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        context_uri: `spotify:playlist:${playlistId}`\n        // context_uri: `spotify:track:4iV5W9uYEdYUVa79Axb7Rh`,\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to play playlist\");\n    }\n    console.log(\"Playlist is now playing\");\n    // Get_current_song_data()\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\nconst handle_playlist_click = playlist_id => {\n  playPlaylist(playlist_id);\n};\nconst GetPlaylist = playlist_json => {\n  var _playlist_json$images, _playlist_json$images2;\n  // Assuming accessToken is the access token\n  // const [data, setData] = useState(null);\n\n  // useEffect(() => {\n  // const playlistId = 'PLAYLIST_ID'; // Replace PLAYLIST_ID with the ID of your playlist\n\n  // console.log(data)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"playlist_image\",\n      onClick: handle_playlist_click.bind(null, playlist_json.id),\n      src: (_playlist_json$images = (_playlist_json$images2 = playlist_json.images[0]) === null || _playlist_json$images2 === void 0 ? void 0 : _playlist_json$images2.url) !== null && _playlist_json$images !== void 0 ? _playlist_json$images : placeholder_playlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"playlist_name\",\n      children: playlist_json.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n};\n_c3 = GetPlaylist;\nconst PlaylistSelect = () => {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.spotify.com/v1/me/playlists?limit=50&offset=0\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(json => setData(json)).catch(error => console.error(error));\n  }, []);\n\n  // data ? console.log(data.items[4]) : console.log(\"pending\")\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"playlist_select\",\n    children: data ? data.items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist\",\n      children: GetPlaylist(item)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this)) : \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaylistSelect, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c4 = PlaylistSelect;\nfunction Header() {\n  // displayName: profile.display_name,\n  // id: profile.id,\n  // email: profile.email,\n  // uri: profile.uri,\n  // profileImage: profileImage\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"head\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"headerItem\",\n      id: \"title\",\n      children: [\" \", \"Spotify Song Trivia\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"headerItem\",\n      id: \"profile_img\",\n      src: profile_data.profileImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"headerItem\",\n      id: \"username\",\n      children: [\" \", profile_data.displayName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 340,\n    columnNumber: 5\n  }, this);\n}\n_c5 = Header;\nconst Skip = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to skip\");\n    }\n    console.log(\"skipped\");\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n_c6 = Skip;\nconst Shuffle = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/shuffle?state=true`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to shuffle\");\n    }\n    console.log(\"shuffling enabled\");\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n_c7 = Shuffle;\nconst NextQuestion = async () => {\n  const song_data = await GetNextSongDataRandom();\n  // Get_available_devices()\n  return song_data;\n  // await Skip()\n\n  // Skip()\n};\n\n// const Get_devices = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/devices`, {\n//           method: 'GET',\n//           headers: {\n//             'Authorization': `Bearer ${accessToken}`,\n//           },\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to get devices');\n//         }\n\n//         console.log('shuffling enabled');\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n// }\n\n// const Correct = () => {\n\n// }\n_c8 = NextQuestion;\nconst GetArtists = artist_list => {\n  return (\n    /*#__PURE__*/\n    // {data ? data.items.map((item, index) => (\n    //     <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n    //   )) : 'Loading...'}\n    _jsxDEV(\"div\", {\n      className: \"artist_wrap\",\n      children: artist_list.map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"artist\",\n        children: [artist.name, index == artist_list.length - 1 ? \"\" : \",\", \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c9 = GetArtists;\nconst Game = () => {\n  _s2();\n  const [songData, setSongData] = useState(null);\n  const [reavealed, setReavealed] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(THINK_TIME);\n  const [songPlaying, setSongPlaying] = useState(false);\n  const isInitialRender = useRef(true);\n\n  // setReavealed(false);\n\n  // useEffect(async () => {\n\n  // const device_data = Get_available_devices();\n  // }, []);\n\n  useEffect(() => {\n    const preProcesses = async () => {\n      const devices = await Get_available_devices();\n      console.log(devices);\n      set_volume(100);\n      Shuffle();\n    };\n    preProcesses();\n  }, []);\n  useEffect(() => {\n    if (isInitialRender.current) {\n      isInitialRender.current = false;\n      return;\n    }\n    const interval = setInterval(() => {\n      setTimeLeft(prevTimeLeft => {\n        if (prevTimeLeft === 0) {\n          clearInterval(interval);\n          if (songPlaying) {\n            setTimeLeft(THINK_TIME);\n            setSongPlaying(false);\n          } else {\n            setReavealed(true);\n            blind_play();\n          }\n          return 0;\n        }\n        return prevTimeLeft - 1;\n      });\n    }, 1000);\n\n    // Clean up the interval to avoid memory leaks\n    return () => clearInterval(interval);\n  }, [songData, songPlaying]); // Run only once on component mount\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        const data = await response.json();\n        console.log(data); // This will log the data to the console\n\n        if (data.progress_ms + 20000 > data.item.duration_ms) {\n          pause();\n        }\n        if (!response.ok) {\n          throw new Error(\"Failed cron fetch\");\n        }\n\n        //   console.log('shuffling enabled');\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    }, 15000);\n\n    // Clean up the interval to avoid memory leaks\n    return () => clearInterval(interval);\n  }, []); // Run only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"skip\",\n      onClick: async () => {\n        setSongPlaying(true);\n        const result = await NextQuestion();\n        setSongData(result);\n        setReavealed(false);\n        setTimeLeft(THINK_TIME);\n        // setTimeout(() => {\n        //     // This code will execute after 10 seconds\n        //     setSongPlaying(false)\n        // }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n        // setSongPlaying(false)\n      },\n      children: \"Skip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"skip\",\n      onClick: () => setReavealed(true),\n      children: \"Correct\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"skip\",\n      onClick: () => setReavealed(false),\n      children: \"Hide\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"track_image\",\n      src: songData && reavealed ? songData.cover : placeholder_playlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer_track\",\n      children: [\"Song: \", songData && reavealed ? songData.name : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer_artists\",\n      children: [\"Artist: \", songData && reavealed ? GetArtists(songData.artists) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info_box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: [\"Time Left: \", `${timeLeft} `]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"instructions\",\n        children: songPlaying ? \"Listen\" : \"Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 540,\n    columnNumber: 5\n  }, this);\n};\n\n// const PlayPlaylistButton = (playlistId) => {\n//   const playPlaylist = async () => {\n//     try {\n//       const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${accessToken}`,\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           context_uri: `spotify:playlist:${playlistId}`,\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to play playlist');\n//       }\n\n//       console.log('Playlist is now playing');\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <button onClick={playPlaylist}>\n//       Play Playlist\n//     </button>\n//   );\n// };\n_s2(Game, \"tMUFhG3aNVo47pUwWp5HHE+R3aY=\");\n_c10 = Game;\nconst Main = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlaylistSelect, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 622,\n    columnNumber: 5\n  }, this);\n};\n_c11 = Main;\nexport default Main;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"Get_available_devices\");\n$RefreshReg$(_c2, \"GetNextSongDataRandom\");\n$RefreshReg$(_c3, \"GetPlaylist\");\n$RefreshReg$(_c4, \"PlaylistSelect\");\n$RefreshReg$(_c5, \"Header\");\n$RefreshReg$(_c6, \"Skip\");\n$RefreshReg$(_c7, \"Shuffle\");\n$RefreshReg$(_c8, \"NextQuestion\");\n$RefreshReg$(_c9, \"GetArtists\");\n$RefreshReg$(_c10, \"Game\");\n$RefreshReg$(_c11, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","authorize","placeholder_playlist","waitFor","jsxDEV","_jsxDEV","ANSWER_TIME","THINK_TIME","user_data","profile_data","profile","accessToken","Get_available_devices","response","fetch","headers","Authorization","data","json","ok","Error","console","log","error","_c","set_volume","vol","method","pause","pause_response","play","play_response","blind_play","body","JSON","stringify","interval","setInterval","playerState","is_playing","clearInterval","GetNextSongDataRandom","skip_response","_data$item","_data$item2","_data$item3","_data$item4","_data$item5","_data$item5$album","data_response","max_start","item","duration_ms","random_pos","Math","floor","random","seek_response","setTimeout","duration","artists","name","cover","album","images","url","_c2","playPlaylist","playlistId","context_uri","handle_playlist_click","playlist_id","GetPlaylist","playlist_json","_playlist_json$images","_playlist_json$images2","children","className","onClick","bind","id","src","fileName","_jsxFileName","lineNumber","columnNumber","_c3","PlaylistSelect","_s","setData","then","catch","items","map","index","_c4","Header","profileImage","displayName","_c5","Skip","_c6","Shuffle","_c7","NextQuestion","song_data","_c8","GetArtists","artist_list","artist","length","_c9","Game","_s2","songData","setSongData","reavealed","setReavealed","timeLeft","setTimeLeft","songPlaying","setSongPlaying","isInitialRender","useRef","preProcesses","devices","current","prevTimeLeft","progress_ms","result","_c10","Main","_c11","$RefreshReg$"],"sources":["/Users/mattlaws/personal/Spotify-Song-Trivia/src/components/Main.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { authorize } from \"../scripts.js\";\nimport \"./styles/Main.css\";\nimport placeholder_playlist from \"./images/placeholder_playlist.png\";\nimport { waitFor } from \"@testing-library/react\";\n\nconst ANSWER_TIME = 6000;\nconst THINK_TIME = 6;\n// TODO can change these with a (easy, medium, hard) setting\n// TODO allow fo playlist searching (get category playlist)\n\nconst user_data = await authorize();\n\nconst profile_data = user_data.profile;\nconst accessToken = user_data.accessToken;\n\nconst Get_available_devices = async () => {\n  try {\n    const response = await fetch(\n      \"https://api.spotify.com/v1/me/player/devices\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\"Failed to pause\");\n    }\n    console.log(data);\n\n    return data;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n\n  return null;\n};\n\nconst set_volume = async (vol) => {\n  try {\n    const response = await fetch(\n      `https://api.spotify.com/v1/me/player/volume?volume_percent=${vol}`,\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(\"Failed to change volume\");\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n\nconst pause = async () => {\n  try {\n    const pause_response = await fetch(\n      `https://api.spotify.com/v1/me/player/pause`,\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n\n    if (!pause_response.ok) {\n      throw new Error(\"Failed to pause\");\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return null; // Return null or handle the error as needed\n  }\n};\n\nconst play = async () => {\n  try {\n    const play_response = await fetch(\n      `https://api.spotify.com/v1/me/player/play`,\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    if (!play_response.ok) {\n      throw new Error(\"Failed to play\");\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n\nconst blind_play = async () => {\n  try {\n    // Start playing the song\n    await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        // Add your song URI or context here\n      }),\n    });\n\n    // Poll the player state to check for end of song\n    const interval = setInterval(async () => {\n      const response = await fetch(\"https://api.spotify.com/v1/me/player\", {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n      const playerState = await response.json();\n      if (!playerState.is_playing) {\n        clearInterval(interval);\n        // Pause playback at the end of the song\n        await fetch(\"https://api.spotify.com/v1/me/player/pause\", {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n      }\n    }, 1000); // Check every second\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n\nconst GetNextSongDataRandom = async () => {\n  try {\n    // const pause_response = await fetch(`https://api.spotify.com/v1/me/player/pause`, {\n    //     method: 'PUT',\n    //     headers: {\n    //       'Authorization': `Bearer ${accessToken}`,\n    //     },\n    //   });\n\n    //   if (!pause_response.ok) {\n    //     throw new Error('Failed to pause');\n    //   }\n\n    await set_volume(0);\n\n    const skip_response = await fetch(\n      `https://api.spotify.com/v1/me/player/next`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n\n    if (!skip_response.ok) {\n      throw new Error(\"Failed to skip\");\n    }\n\n    console.log(\"skipped\");\n    try {\n      const data_response = await fetch(\n        `https://api.spotify.com/v1/me/player/currently-playing`,\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      );\n      const data = await data_response.json();\n\n      const max_start = data?.item?.duration_ms - 30000;\n\n      // seek random position\n      const random_pos = Math.floor(Math.random() * max_start);\n      const seek_response = await fetch(\n        `https://api.spotify.com/v1/me/player/seek?position_ms=${random_pos}`,\n        {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      );\n\n      if (!seek_response.ok) {\n        throw new Error(\"Failed to seek\");\n      }\n\n      // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n      // Usage: wait for 5 seconds\n      // await delay(1000);\n\n      set_volume(100);\n\n      // const play_response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      //     method: 'PUT',\n      //     headers: {\n      //       'Authorization': `Bearer ${accessToken}`,\n      //       'Content-Type': 'application/json',\n      //     },\n      //     // body: JSON.stringify({\n      //     //     \"position_ms\": `${random_pos}`\n\n      //     // }),\n      //   });\n\n      //   if (!play_response.ok) {\n      //     throw new Error('Failed to play');\n      //   }\n      // Return the current song data\n\n      setTimeout(() => {\n        // This code will execute after 10 seconds\n        pause();\n      }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n\n      return {\n        duration: data?.item?.duration_ms,\n        artists: data?.item?.artists,\n        name: data?.item?.name,\n        cover: data?.item?.album?.images[0].url,\n      };\n    } catch (error) {\n      console.error(\"Error:\", error);\n      return null; // Return null or handle the error as needed\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n\nconst playPlaylist = async (playlistId) => {\n  // Get_available_devices()\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        context_uri: `spotify:playlist:${playlistId}`,\n        // context_uri: `spotify:track:4iV5W9uYEdYUVa79Axb7Rh`,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to play playlist\");\n    }\n\n    console.log(\"Playlist is now playing\");\n    // Get_current_song_data()\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n\nconst handle_playlist_click = (playlist_id) => {\n  playPlaylist(playlist_id);\n};\n\nconst GetPlaylist = (playlist_json) => {\n  // Assuming accessToken is the access token\n  // const [data, setData] = useState(null);\n\n  // useEffect(() => {\n  // const playlistId = 'PLAYLIST_ID'; // Replace PLAYLIST_ID with the ID of your playlist\n\n  // console.log(data)\n\n  return (\n    <div>\n      <img\n        className=\"playlist_image\"\n        onClick={handle_playlist_click.bind(null, playlist_json.id)}\n        src={playlist_json.images[0]?.url ?? placeholder_playlist}\n      ></img>\n      <p className=\"playlist_name\">{playlist_json.name}</p>\n    </div>\n  );\n};\n\nconst PlaylistSelect = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.spotify.com/v1/me/playlists?limit=50&offset=0\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => console.error(error));\n  }, []);\n\n  // data ? console.log(data.items[4]) : console.log(\"pending\")\n\n  return (\n    <div id=\"playlist_select\">\n      {/* {data ? <pre>{JSON.stringify(data, null, 2)}</pre> : 'Loading...'} */}\n      {/* {data ? <pre>{get_playlist(data.items[0])}</pre> : 'Loading...'}\n      {data ? <pre>{get_playlist(data.items[2])}</pre> : 'Loading...'}\n      {data ? <pre>{get_playlist(data.items[3])}</pre> : 'Loading...'}\n      {data ? <pre>{get_playlist(data.items[5])}</pre> : 'Loading...'} */}\n      {/* {data ? <pre>{JSON.(data.items[5], null, 2)}</pre> : 'Loading...'} */}\n\n      {data\n        ? data.items.map((item, index) => (\n            <div className=\"playlist\" key={index}>\n              {GetPlaylist(item)}\n            </div>\n          ))\n        : \"Loading...\"}\n    </div>\n  );\n};\n\nfunction Header() {\n  // displayName: profile.display_name,\n  // id: profile.id,\n  // email: profile.email,\n  // uri: profile.uri,\n  // profileImage: profileImage\n  return (\n    <div id=\"head\">\n      {/* <section id=\"profile\"> */}\n      <h1 className=\"headerItem\" id=\"title\">\n        {\" \"}\n        Spotify Song Trivia\n      </h1>\n      <img\n        className=\"headerItem\"\n        id=\"profile_img\"\n        src={profile_data.profileImage}\n      />\n\n      <h2 className=\"headerItem\" id=\"username\">\n        {\" \"}\n        {profile_data.displayName}\n      </h2>\n      {/* <ul> */}\n      {/* <li>User ID: <span id=\"id\"></span></li> */}\n      {/* <li>Email: {profile_data.email}</li> */}\n      {/* </ul> */}\n      {/* </section> */}\n    </div>\n  );\n}\n\nconst Skip = async () => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/me/player/next`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to skip\");\n    }\n\n    console.log(\"skipped\");\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n\nconst Shuffle = async () => {\n  try {\n    const response = await fetch(\n      `https://api.spotify.com/v1/me/player/shuffle?state=true`,\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(\"Failed to shuffle\");\n    }\n\n    console.log(\"shuffling enabled\");\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n\nconst NextQuestion = async () => {\n  const song_data = await GetNextSongDataRandom();\n  // Get_available_devices()\n  return song_data;\n  // await Skip()\n\n  // Skip()\n};\n\n// const Get_devices = async () => {\n//     try {\n//         const response = await fetch(`https://api.spotify.com/v1/me/player/devices`, {\n//           method: 'GET',\n//           headers: {\n//             'Authorization': `Bearer ${accessToken}`,\n//           },\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to get devices');\n//         }\n\n//         console.log('shuffling enabled');\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n// }\n\n// const Correct = () => {\n\n// }\n\nconst GetArtists = (artist_list) => {\n  return (\n    // {data ? data.items.map((item, index) => (\n    //     <div className=\"playlist\" key={index}>{ GetPlaylist(item)}</div>\n    //   )) : 'Loading...'}\n    <div className=\"artist_wrap\">\n      {artist_list.map((artist, index) => (\n        <div key={index} className=\"artist\">\n          {artist.name}\n          {index == artist_list.length - 1 ? \"\" : \",\"}{\" \"}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst Game = () => {\n  const [songData, setSongData] = useState(null);\n  const [reavealed, setReavealed] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(THINK_TIME);\n  const [songPlaying, setSongPlaying] = useState(false);\n  const isInitialRender = useRef(true);\n\n  // setReavealed(false);\n\n  // useEffect(async () => {\n\n  // const device_data = Get_available_devices();\n  // }, []);\n\n  useEffect(() => {\n    const preProcesses = async () => {\n      const devices = await Get_available_devices();\n      console.log(devices);\n      set_volume(100);\n      Shuffle();\n    };\n\n    preProcesses();\n  }, []);\n\n  useEffect(() => {\n    if (isInitialRender.current) {\n      isInitialRender.current = false;\n      return;\n    }\n    const interval = setInterval(() => {\n      setTimeLeft((prevTimeLeft) => {\n        if (prevTimeLeft === 0) {\n          clearInterval(interval);\n\n          if (songPlaying) {\n            setTimeLeft(THINK_TIME);\n            setSongPlaying(false);\n          } else {\n            setReavealed(true);\n            blind_play();\n          }\n\n          return 0;\n        }\n        return prevTimeLeft - 1;\n      });\n    }, 1000);\n\n    // Clean up the interval to avoid memory leaks\n    return () => clearInterval(interval);\n  }, [songData, songPlaying]); // Run only once on component mount\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await fetch(\n          `https://api.spotify.com/v1/me/player/currently-playing`,\n          {\n            headers: {\n              Authorization: `Bearer ${accessToken}`,\n            },\n          }\n        );\n        const data = await response.json();\n        console.log(data); // This will log the data to the console\n\n        if (data.progress_ms + 20000 > data.item.duration_ms) {\n          pause();\n        }\n\n        if (!response.ok) {\n          throw new Error(\"Failed cron fetch\");\n        }\n\n        //   console.log('shuffling enabled');\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    }, 15000);\n\n    // Clean up the interval to avoid memory leaks\n    return () => clearInterval(interval);\n  }, []); // Run only once on component mount\n\n  return (\n    <div>\n      <button\n        className=\"skip\"\n        onClick={async () => {\n          setSongPlaying(true);\n\n          const result = await NextQuestion();\n\n          setSongData(result);\n          setReavealed(false);\n          setTimeLeft(THINK_TIME);\n          // setTimeout(() => {\n          //     // This code will execute after 10 seconds\n          //     setSongPlaying(false)\n          // }, ANSWER_TIME); // 10000 milliseconds = 10 seconds\n          // setSongPlaying(false)\n        }}\n      >\n        Skip\n      </button>\n      {/* {console.log(songData)} */}\n\n      <button className=\"skip\" onClick={() => setReavealed(true)}>\n        Correct\n      </button>\n\n      <button className=\"skip\" onClick={() => setReavealed(false)}>\n        Hide\n      </button>\n\n      <img\n        className=\"track_image\"\n        src={songData && reavealed ? songData.cover : placeholder_playlist}\n      ></img>\n      <div className=\"answer_track\">\n        Song: {songData && reavealed ? songData.name : \"\"}\n      </div>\n      <div className=\"answer_artists\">\n        Artist: {songData && reavealed ? GetArtists(songData.artists) : \"\"}\n      </div>\n\n      <div className=\"info_box\">\n        <div className=\"timer\">Time Left: {`${timeLeft} `}</div>\n        <div className=\"instructions\">{songPlaying ? \"Listen\" : \"Answer\"}</div>\n      </div>\n    </div>\n  );\n};\n\n// const PlayPlaylistButton = (playlistId) => {\n//   const playPlaylist = async () => {\n//     try {\n//       const response = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${accessToken}`,\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           context_uri: `spotify:playlist:${playlistId}`,\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to play playlist');\n//       }\n\n//       console.log('Playlist is now playing');\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   return (\n//     <button onClick={playPlaylist}>\n//       Play Playlist\n//     </button>\n//   );\n// };\n\nconst Main = () => {\n  return (\n    <div>\n      <Header />\n      <PlaylistSelect />\n      <Game />\n    </div>\n  );\n};\n\nexport default Main;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}