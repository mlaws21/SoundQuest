{"ast":null,"code":"var _jsxFileName = \"/Users/mattlaws/personal/spotify_react/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Home from \"./components/Home.jsx\";\nimport { redirectToAuthCodeFlow, getAccessToken } from \"./scripts.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = \"379e50830b614f5da69a1b198f950418\"; // Replace with your Spotify client ID\n\nfunction App() {\n  // const [accessToken, setAccessToken] = useState('');\n  // const [refreshToken, setRefreshToken] = useState('');\n\n  // useEffect(() => {\n  //     const storedAccessToken = localStorage.getItem('accessToken');\n  //     const storedRefreshToken = localStorage.getItem('refreshToken');\n  //     const storedTokenExpiration = localStorage.getItem('tokenExpiration');\n\n  //     if (storedAccessToken && storedRefreshToken && storedTokenExpiration) {\n  //         if (Date.now() < parseInt(storedTokenExpiration, 10)) {\n  //             setAccessToken(storedAccessToken);\n  //             setRefreshToken(storedRefreshToken);\n  //         } else {\n  //             // Token is expired, refresh it\n  //             getAccessToken(clientId, storedRefreshToken)\n  //                 .then(newAccessToken => {\n  //                     setAccessToken(newAccessToken);\n  //                     localStorage.setItem('accessToken', newAccessToken);\n  //                     localStorage.setItem('tokenExpiration', (Date.now() + 3600000).toString()); // Assuming tokens expire in 1 hour (3600000 ms)\n  //                 })\n  //                 .catch(error => {\n  //                     console.error(\"Error refreshing token:\", error);\n  //                     // Handle error, e.g., redirect to authentication flow\n  //                     redirectToAuthCodeFlow(clientId);\n  //                 });\n  //         }\n  //     } else {\n  //         // Redirect to authentication flow\n  //         redirectToAuthCodeFlow(clientId);\n  //     }\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Home","redirectToAuthCodeFlow","getAccessToken","jsxDEV","_jsxDEV","clientId","App","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mattlaws/personal/spotify_react/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Home from \"./components/Home.jsx\"\nimport { redirectToAuthCodeFlow, getAccessToken } from \"./scripts.js\"\n\nconst clientId = \"379e50830b614f5da69a1b198f950418\"; // Replace with your Spotify client ID\n\nfunction App() {\n    // const [accessToken, setAccessToken] = useState('');\n    // const [refreshToken, setRefreshToken] = useState('');\n\n    // useEffect(() => {\n    //     const storedAccessToken = localStorage.getItem('accessToken');\n    //     const storedRefreshToken = localStorage.getItem('refreshToken');\n    //     const storedTokenExpiration = localStorage.getItem('tokenExpiration');\n\n    //     if (storedAccessToken && storedRefreshToken && storedTokenExpiration) {\n    //         if (Date.now() < parseInt(storedTokenExpiration, 10)) {\n    //             setAccessToken(storedAccessToken);\n    //             setRefreshToken(storedRefreshToken);\n    //         } else {\n    //             // Token is expired, refresh it\n    //             getAccessToken(clientId, storedRefreshToken)\n    //                 .then(newAccessToken => {\n    //                     setAccessToken(newAccessToken);\n    //                     localStorage.setItem('accessToken', newAccessToken);\n    //                     localStorage.setItem('tokenExpiration', (Date.now() + 3600000).toString()); // Assuming tokens expire in 1 hour (3600000 ms)\n    //                 })\n    //                 .catch(error => {\n    //                     console.error(\"Error refreshing token:\", error);\n    //                     // Handle error, e.g., redirect to authentication flow\n    //                     redirectToAuthCodeFlow(clientId);\n    //                 });\n    //         }\n    //     } else {\n    //         // Redirect to authentication flow\n    //         redirectToAuthCodeFlow(clientId);\n    //     }\n    // }, []);\n\n    return (\n        <div className=\"App\">\n            <Home />\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,uBAAuB;AACxC,SAASC,sBAAsB,EAAEC,cAAc,QAAQ,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErE,MAAMC,QAAQ,GAAG,kCAAkC,CAAC,CAAC;;AAErD,SAASC,GAAGA,CAAA,EAAG;EACX;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACIF,OAAA;IAAKG,SAAS,EAAC,KAAK;IAAAC,QAAA,eAChBJ,OAAA,CAACJ,IAAI;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd;AAACC,EAAA,GAtCQP,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}